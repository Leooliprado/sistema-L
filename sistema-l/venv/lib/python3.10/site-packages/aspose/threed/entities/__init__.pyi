from typing import List, Optional, Dict, Iterable, Any, overload
import io
import collections.abc
from collections.abc import Sequence
from datetime import datetime
from aspose.pyreflection import Type
import aspose.pycore
import aspose.pydrawing
from uuid import UUID
import aspose.threed
import aspose.threed.animation
import aspose.threed.deformers
import aspose.threed.entities
import aspose.threed.formats
import aspose.threed.profiles
import aspose.threed.render
import aspose.threed.shading
import aspose.threed.utilities

class Box(Primitive):
    '''Box.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Box` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, length : float, width : float, height : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Box` class.
        
        :param length: Length of the box aligned in z-axis.
        :param width: Width of the box aligned in x-axis.
        :param height: Height of the box aligned in y-axis.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, length : float, width : float, height : float, length_segments : int, width_segments : int, height_segments : int) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Box` class.
        
        :param name: Name of the box.
        :param length: Length of the box aligned in z-axis.
        :param width: Width of the box aligned in x-axis.
        :param height: Height of the box aligned in y-axis.
        :param length_segments: Length segments.
        :param width_segments: Width segments.
        :param height_segments: Height segments.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def length_segments(self) -> int:
        '''Gets the length segments.'''
        raise NotImplementedError()
    
    @length_segments.setter
    def length_segments(self, value : int) -> None:
        '''Sets the length segments.'''
        raise NotImplementedError()
    
    @property
    def width_segments(self) -> int:
        '''Gets the width segments'''
        raise NotImplementedError()
    
    @width_segments.setter
    def width_segments(self, value : int) -> None:
        '''Sets the width segments'''
        raise NotImplementedError()
    
    @property
    def height_segments(self) -> int:
        '''gets the height segments.'''
        raise NotImplementedError()
    
    @height_segments.setter
    def height_segments(self, value : int) -> None:
        '''gets or sets the height segments.'''
        raise NotImplementedError()
    
    @property
    def length(self) -> float:
        '''Gets the length of the box aligned in z-axis.'''
        raise NotImplementedError()
    
    @length.setter
    def length(self, value : float) -> None:
        '''Sets the length of the box aligned in z-axis.'''
        raise NotImplementedError()
    
    @property
    def width(self) -> float:
        '''Gets the width of the box aligned in x-axis.'''
        raise NotImplementedError()
    
    @width.setter
    def width(self, value : float) -> None:
        '''Sets the width of the box aligned in x-axis.'''
        raise NotImplementedError()
    
    @property
    def height(self) -> float:
        '''Gets the height of the box aligned in y-axis.'''
        raise NotImplementedError()
    
    @height.setter
    def height(self, value : float) -> None:
        '''Sets the height of the box aligned in y-axis.'''
        raise NotImplementedError()
    

class Camera(Frustum):
    '''The camera describes the eye point of the viewer looking at the scene.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Camera` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, projection_type : aspose.threed.entities.ProjectionType) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Camera` class.
        
        :param projection_type: Projection type.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Camera` class.
        
        :param name: Name.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, projection_type : aspose.threed.entities.ProjectionType) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Camera` class.
        
        :param name: Name.
        :param projection_type: Projection type.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def move_forward(self, distance : float) -> None:
        '''Move camera forward towards its direction or target.
        
        :param distance: How long to move forward'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def rotation_mode(self) -> aspose.threed.entities.RotationMode:
        '''Gets the frustum\'s orientation mode
        This property only works when the :py:attr:`aspose.threed.entities.Frustum.target` is null.
        If the value is :py:attr:`aspose.threed.entities.RotationMode.FIXED_TARGET`, the direction is always calculated by the property :py:attr:`aspose.threed.entities.Frustum.look_at`
        Otherwise the :py:attr:`aspose.threed.entities.Frustum.look_at` is always calculated by the :py:attr:`aspose.threed.entities.Frustum.direction`'''
        raise NotImplementedError()
    
    @rotation_mode.setter
    def rotation_mode(self, value : aspose.threed.entities.RotationMode) -> None:
        '''Sets the frustum\'s orientation mode
        This property only works when the :py:attr:`aspose.threed.entities.Frustum.target` is null.
        If the value is :py:attr:`aspose.threed.entities.RotationMode.FIXED_TARGET`, the direction is always calculated by the property :py:attr:`aspose.threed.entities.Frustum.look_at`
        Otherwise the :py:attr:`aspose.threed.entities.Frustum.look_at` is always calculated by the :py:attr:`aspose.threed.entities.Frustum.direction`'''
        raise NotImplementedError()
    
    @property
    def near_plane(self) -> float:
        '''Gets the frustum\'s near plane distance.'''
        raise NotImplementedError()
    
    @near_plane.setter
    def near_plane(self, value : float) -> None:
        '''Sets the frustum\'s near plane distance.'''
        raise NotImplementedError()
    
    @property
    def far_plane(self) -> float:
        '''Gets the frustum\'s far plane distance.'''
        raise NotImplementedError()
    
    @far_plane.setter
    def far_plane(self, value : float) -> None:
        '''Sets the frustum\'s far plane distance.'''
        raise NotImplementedError()
    
    @property
    def aspect(self) -> float:
        '''Gets the aspect ratio of the frustum'''
        raise NotImplementedError()
    
    @aspect.setter
    def aspect(self, value : float) -> None:
        '''Sets the aspect ratio of the frustum'''
        raise NotImplementedError()
    
    @property
    def ortho_height(self) -> float:
        '''Gets the height when frustum in orthographic projection.'''
        raise NotImplementedError()
    
    @ortho_height.setter
    def ortho_height(self, value : float) -> None:
        '''Sets the height when frustum in orthographic projection.'''
        raise NotImplementedError()
    
    @property
    def up(self) -> aspose.threed.utilities.Vector3:
        '''Gets the up direction of the camera'''
        raise NotImplementedError()
    
    @up.setter
    def up(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the up direction of the camera'''
        raise NotImplementedError()
    
    @property
    def look_at(self) -> aspose.threed.utilities.Vector3:
        '''Gets the the interested position that the camera is looking at.'''
        raise NotImplementedError()
    
    @look_at.setter
    def look_at(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the the interested position that the camera is looking at.'''
        raise NotImplementedError()
    
    @property
    def direction(self) -> aspose.threed.utilities.Vector3:
        '''Gets the direction that the camera is looking at.
        Changes on this property will also affects the :py:attr:`aspose.threed.entities.Frustum.look_at` and :py:attr:`aspose.threed.entities.Frustum.target`.'''
        raise NotImplementedError()
    
    @direction.setter
    def direction(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the direction that the camera is looking at.
        Changes on this property will also affects the :py:attr:`aspose.threed.entities.Frustum.look_at` and :py:attr:`aspose.threed.entities.Frustum.target`.'''
        raise NotImplementedError()
    
    @property
    def target(self) -> aspose.threed.Node:
        '''Gets the target that the camera is looking at.
        If the user supports this property, it should be prior to :py:attr:`aspose.threed.entities.Frustum.look_at` property.'''
        raise NotImplementedError()
    
    @target.setter
    def target(self, value : aspose.threed.Node) -> None:
        '''Sets the target that the camera is looking at.
        If the user supports this property, it should be prior to :py:attr:`aspose.threed.entities.Frustum.look_at` property.'''
        raise NotImplementedError()
    
    @property
    def aperture_mode(self) -> aspose.threed.entities.ApertureMode:
        '''Gets the camera\'s aperture mode'''
        raise NotImplementedError()
    
    @aperture_mode.setter
    def aperture_mode(self, value : aspose.threed.entities.ApertureMode) -> None:
        '''Sets the camera\'s aperture mode'''
        raise NotImplementedError()
    
    @property
    def field_of_view(self) -> float:
        '''Gets the camera\'s field of view in degrees, this property is used only when ApertureMode is :py:attr:`aspose.threed.entities.ApertureMode.HORIZONTAL` or :py:attr:`aspose.threed.entities.ApertureMode.VERTICAL`'''
        raise NotImplementedError()
    
    @field_of_view.setter
    def field_of_view(self, value : float) -> None:
        '''Sets the camera\'s field of view in degrees, this property is used only when ApertureMode is :py:attr:`aspose.threed.entities.ApertureMode.HORIZONTAL` or :py:attr:`aspose.threed.entities.ApertureMode.VERTICAL`'''
        raise NotImplementedError()
    
    @property
    def field_of_view_x(self) -> float:
        '''Gets the camera\'s horizontal field of view in degrees, this property is used only when ApertureMode is  :py:attr:`aspose.threed.entities.ApertureMode.HORIZ_AND_VERT`'''
        raise NotImplementedError()
    
    @field_of_view_x.setter
    def field_of_view_x(self, value : float) -> None:
        '''Sets the camera\'s horizontal field of view in degrees, this property is used only when ApertureMode is  :py:attr:`aspose.threed.entities.ApertureMode.HORIZ_AND_VERT`'''
        raise NotImplementedError()
    
    @property
    def field_of_view_y(self) -> float:
        '''Gets the camera\'s vertical field of view in degrees, this property is used only when ApertureMode is  :py:attr:`aspose.threed.entities.ApertureMode.HORIZ_AND_VERT`'''
        raise NotImplementedError()
    
    @field_of_view_y.setter
    def field_of_view_y(self, value : float) -> None:
        '''Sets the camera\'s vertical field of view in degrees, this property is used only when ApertureMode is  :py:attr:`aspose.threed.entities.ApertureMode.HORIZ_AND_VERT`'''
        raise NotImplementedError()
    
    @property
    def width(self) -> float:
        '''Gets the view plane\'s width measured in inches'''
        raise NotImplementedError()
    
    @width.setter
    def width(self, value : float) -> None:
        '''Sets the view plane\'s width measured in inches'''
        raise NotImplementedError()
    
    @property
    def height(self) -> float:
        '''Gets the view plane\'s height measured in inches'''
        raise NotImplementedError()
    
    @height.setter
    def height(self, value : float) -> None:
        '''Sets the view plane\'s height measured in inches'''
        raise NotImplementedError()
    
    @property
    def aspect_ratio(self) -> float:
        '''Gets the view plane aspect ratio.'''
        raise NotImplementedError()
    
    @aspect_ratio.setter
    def aspect_ratio(self, value : float) -> None:
        '''Sets the view plane aspect ratio.'''
        raise NotImplementedError()
    
    @property
    def magnification(self) -> aspose.threed.utilities.Vector2:
        '''Gets the magnification used in orthographic camera'''
        raise NotImplementedError()
    
    @magnification.setter
    def magnification(self, value : aspose.threed.utilities.Vector2) -> None:
        '''Sets the magnification used in orthographic camera'''
        raise NotImplementedError()
    
    @property
    def projection_type(self) -> aspose.threed.entities.ProjectionType:
        '''Gets the camera\'s projection type.
        By default the perspective projection is used.'''
        raise NotImplementedError()
    
    @projection_type.setter
    def projection_type(self, value : aspose.threed.entities.ProjectionType) -> None:
        '''Sets the camera\'s projection type.
        By default the perspective projection is used.'''
        raise NotImplementedError()
    

class Circle(Curve):
    '''A :py:class:`aspose.threed.entities.Circle` curve consists of a set of points in the edge of the circle shape.'''
    
    @overload
    def __init__(self) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.Circle`'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius : float) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.Circle`
        
        :param radius: The radius of the circle curve.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @property
    def radius(self) -> float:
        '''The radius of the circle curve, default value is 10'''
        raise NotImplementedError()
    
    @radius.setter
    def radius(self, value : float) -> None:
        '''The radius of the circle curve, default value is 10'''
        raise NotImplementedError()
    

class CompositeCurve(Curve):
    '''A :py:class:`aspose.threed.entities.CompositeCurve` is consisting of several curve segments.'''
    
    def __init__(self) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.CompositeCurve`'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def add_segment(self, curve : aspose.threed.entities.Curve, same_direction : bool) -> None:
        '''Add a new segment to current curve.
        
        :param curve: The curve to add
        :param same_direction: Same direction with current curve.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @property
    def segments(self) -> List[CompositeCurve.Segment]:
        '''The segments of the curve.'''
        raise NotImplementedError()
    

class Curve(aspose.threed.Entity):
    '''The base class of all curve implementations.'''
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    

class Cylinder(Primitive):
    '''Parameterized Cylinder.
    It can also be used to represent the cone when one of radiusTop/radiusBottom is zero.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Cylinder` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius : float, height : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Cylinder` class.
        
        :param radius: Radius of the top and bottom cap.
        :param height: Height.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius_top : float, radius_bottom : float, height : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Cylinder` class.
        
        :param radius_top: Radius top.
        :param radius_bottom: Radius bottom.
        :param height: Height.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius_top : float, radius_bottom : float, height : float, radial_segments : int, height_segments : int, open_ended : bool) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Cylinder` class.
        
        :param radius_top: Radius of cylinder\'s top cap.
        :param radius_bottom: Radius of cylinder\'s bottom cap.
        :param height: Height of the cylinder.
        :param radial_segments: Radial segments of both top and bottom circles..
        :param height_segments: Height segments.
        :param open_ended: If set to ``true`` the cylinder would have no bottom/top caps..'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, radius_top : float, radius_bottom : float, height : float, radial_segments : int, height_segments : int, open_ended : bool, theta_start : float, theta_length : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Cylinder` class.
        
        :param name: The name of this object
        :param radius_top: Radius of cylinder\'s top cap.
        :param radius_bottom: Radius of cylinder\'s bottom cap.
        :param height: Height of the cylinder.
        :param radial_segments: Radial segments of both top and bottom circles..
        :param height_segments: Height segments.
        :param open_ended: If set to ``true`` the cylinder would have no bottom/top caps..
        :param theta_start: Theta start.
        :param theta_length: Theta length.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def offset_bottom(self) -> aspose.threed.utilities.Vector3:
        '''Gets the vertices transformation offset of the bottom side.'''
        raise NotImplementedError()
    
    @offset_bottom.setter
    def offset_bottom(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the vertices transformation offset of the bottom side.'''
        raise NotImplementedError()
    
    @property
    def offset_top(self) -> aspose.threed.utilities.Vector3:
        '''Gets the vertices transformation offset of the top side.'''
        raise NotImplementedError()
    
    @offset_top.setter
    def offset_top(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the vertices transformation offset of the top side.'''
        raise NotImplementedError()
    
    @property
    def generate_fan_cylinder(self) -> bool:
        '''Gets whether to generate the fan-style cylinder when the ThetaLength is less than 2*PI, otherwise the model will not be cut.'''
        raise NotImplementedError()
    
    @generate_fan_cylinder.setter
    def generate_fan_cylinder(self, value : bool) -> None:
        '''Sets whether to generate the fan-style cylinder when the ThetaLength is less than 2*PI, otherwise the model will not be cut.'''
        raise NotImplementedError()
    
    @property
    def shear_bottom(self) -> aspose.threed.utilities.Vector2:
        '''Gets of the shear transform of the bottom side, vector stores the (x-axis, z-axis) shear value that measured in radian, default value is (0, 0)'''
        raise NotImplementedError()
    
    @shear_bottom.setter
    def shear_bottom(self, value : aspose.threed.utilities.Vector2) -> None:
        '''Sets of the shear transform of the bottom side, vector stores the (x-axis, z-axis) shear value that measured in radian, default value is (0, 0)'''
        raise NotImplementedError()
    
    @property
    def shear_top(self) -> aspose.threed.utilities.Vector2:
        '''Gets of the shear transform of the top side, vector stores the (x-axis, z-axis) shear value that measured in radian, default value is (0, 0)'''
        raise NotImplementedError()
    
    @shear_top.setter
    def shear_top(self, value : aspose.threed.utilities.Vector2) -> None:
        '''Sets of the shear transform of the top side, vector stores the (x-axis, z-axis) shear value that measured in radian, default value is (0, 0)'''
        raise NotImplementedError()
    
    @property
    def radius_top(self) -> float:
        '''Gets the radius of cylinder\'s top cap.'''
        raise NotImplementedError()
    
    @radius_top.setter
    def radius_top(self, value : float) -> None:
        '''Sets the radius of cylinder\'s top cap.'''
        raise NotImplementedError()
    
    @property
    def radius_bottom(self) -> float:
        '''Gets the radius of cylinder\'s bottom cap.'''
        raise NotImplementedError()
    
    @radius_bottom.setter
    def radius_bottom(self, value : float) -> None:
        '''Sets the radius of cylinder\'s bottom cap.'''
        raise NotImplementedError()
    
    @property
    def height(self) -> float:
        '''Gets the height of the cylinder.'''
        raise NotImplementedError()
    
    @height.setter
    def height(self, value : float) -> None:
        '''Sets the height of the cylinder.'''
        raise NotImplementedError()
    
    @property
    def radial_segments(self) -> int:
        '''Gets the radial segments.'''
        raise NotImplementedError()
    
    @radial_segments.setter
    def radial_segments(self, value : int) -> None:
        '''Sets the radial segments.'''
        raise NotImplementedError()
    
    @property
    def height_segments(self) -> int:
        '''Gets the height segments.'''
        raise NotImplementedError()
    
    @height_segments.setter
    def height_segments(self, value : int) -> None:
        '''Sets the height segments.'''
        raise NotImplementedError()
    
    @property
    def open_ended(self) -> bool:
        '''Gets a value indicating whether this :py:class:`aspose.threed.entities.Cylinder` open ended.
        The default value is false.'''
        raise NotImplementedError()
    
    @open_ended.setter
    def open_ended(self, value : bool) -> None:
        '''Sets a value indicating whether this :py:class:`aspose.threed.entities.Cylinder` open ended.
        The default value is false.'''
        raise NotImplementedError()
    
    @property
    def theta_start(self) -> float:
        '''Gets the theta start.
        The default value is 0.'''
        raise NotImplementedError()
    
    @theta_start.setter
    def theta_start(self, value : float) -> None:
        '''Sets the theta start.
        The default value is 0.'''
        raise NotImplementedError()
    
    @property
    def theta_length(self) -> float:
        '''Gets the length of the theta.
        The default value is 2π.'''
        raise NotImplementedError()
    
    @theta_length.setter
    def theta_length(self, value : float) -> None:
        '''Sets the length of the theta.
        The default value is 2π.'''
        raise NotImplementedError()
    

class Dish(Primitive):
    '''Parameterized dish.'''
    
    @overload
    def __init__(self) -> None:
        '''Create a new dish instance with default radius(10) and default height(5)'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius : float, height : float) -> None:
        '''Create a new dish instance with specified radius and height
        
        :param radius: The radius of the dish
        :param height: The height of the dish'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, radius : float, height : float, width_segments : int, height_segments : int) -> None:
        '''Create a new dish instance with specified radius and height
        
        :param name: The name of the dish
        :param radius: The radius of the dish
        :param height: The height of the dish
        :param width_segments: The width segment of the dish
        :param height_segments: The height segment of the dish'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def height(self) -> float:
        '''Height of the dish'''
        raise NotImplementedError()
    
    @height.setter
    def height(self, value : float) -> None:
        '''Height of the dish'''
        raise NotImplementedError()
    
    @property
    def radius(self) -> float:
        '''Radius of the dish'''
        raise NotImplementedError()
    
    @radius.setter
    def radius(self, value : float) -> None:
        '''Radius of the dish'''
        raise NotImplementedError()
    
    @property
    def width_segments(self) -> int:
        '''Gets the width segments'''
        raise NotImplementedError()
    
    @width_segments.setter
    def width_segments(self, value : int) -> None:
        '''Sets the width segments'''
        raise NotImplementedError()
    
    @property
    def height_segments(self) -> int:
        '''Gets the height segments'''
        raise NotImplementedError()
    
    @height_segments.setter
    def height_segments(self, value : int) -> None:
        '''Sets the height segments'''
        raise NotImplementedError()
    

class Ellipse(Curve):
    '''An :py:class:`aspose.threed.entities.Ellipse` defines a set of points that form the shape of ellipse.'''
    
    @overload
    def __init__(self) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.Ellipse`'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, semi_axis1 : float, semi_axis2 : float) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.Ellipse`
        
        :param semi_axis1: Length of the first semi axis
        :param semi_axis2: Length of the second semi axis'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @property
    def semi_axis1(self) -> float:
        '''Radius on X-axis'''
        raise NotImplementedError()
    
    @semi_axis1.setter
    def semi_axis1(self, value : float) -> None:
        '''Radius on X-axis'''
        raise NotImplementedError()
    
    @property
    def semi_axis2(self) -> float:
        '''Radius on Y-axis'''
        raise NotImplementedError()
    
    @semi_axis2.setter
    def semi_axis2(self, value : float) -> None:
        '''Radius on Y-axis'''
        raise NotImplementedError()
    

class EndPoint:
    '''The end point to trim the curve, can be a parameter value or a Cartesian point.'''
    
    @overload
    def __init__(self, point : aspose.threed.utilities.Vector3) -> None:
        '''Construct a :py:class:`aspose.threed.entities.EndPoint` from a Cartesian point.
        
        :param point: Point to construct'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, v : float) -> None:
        '''Construct a :py:class:`aspose.threed.entities.EndPoint` from a real parameter.
        
        :param v: The real number parameter for constructing an end point'''
        raise NotImplementedError()
    
    @overload
    def __init__(self) -> None:
        raise NotImplementedError()
    
    @staticmethod
    def from_degree(degree : float) -> aspose.threed.entities.EndPoint:
        '''Create an end point measured in degree.
        
        :param degree: The value in degree
        :returns: An end point constructed from degree'''
        raise NotImplementedError()
    
    @staticmethod
    def from_radian(degree : float) -> aspose.threed.entities.EndPoint:
        '''Create an end point measured in radian.
        
        :param degree: The value in radian
        :returns: An end point constructed from radian'''
        raise NotImplementedError()
    
    @property
    def is_cartesian_point(self) -> bool:
        '''Is the end point a Cartesian point?'''
        raise NotImplementedError()
    
    @property
    def as_point(self) -> aspose.threed.utilities.Vector3:
        '''Gets the end point as Cartesian point, or thrown an exception.'''
        raise NotImplementedError()
    
    @property
    def as_value(self) -> float:
        '''Gets the end point as a real parameter, or throw an exception.'''
        raise NotImplementedError()
    

class Frustum(aspose.threed.Entity):
    '''The base class of :py:class:`aspose.threed.entities.Camera` and :py:class:`aspose.threed.entities.Light`'''
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def rotation_mode(self) -> aspose.threed.entities.RotationMode:
        '''Gets the frustum\'s orientation mode
        This property only works when the :py:attr:`aspose.threed.entities.Frustum.target` is null.
        If the value is :py:attr:`aspose.threed.entities.RotationMode.FIXED_TARGET`, the direction is always calculated by the property :py:attr:`aspose.threed.entities.Frustum.look_at`
        Otherwise the :py:attr:`aspose.threed.entities.Frustum.look_at` is always calculated by the :py:attr:`aspose.threed.entities.Frustum.direction`'''
        raise NotImplementedError()
    
    @rotation_mode.setter
    def rotation_mode(self, value : aspose.threed.entities.RotationMode) -> None:
        '''Sets the frustum\'s orientation mode
        This property only works when the :py:attr:`aspose.threed.entities.Frustum.target` is null.
        If the value is :py:attr:`aspose.threed.entities.RotationMode.FIXED_TARGET`, the direction is always calculated by the property :py:attr:`aspose.threed.entities.Frustum.look_at`
        Otherwise the :py:attr:`aspose.threed.entities.Frustum.look_at` is always calculated by the :py:attr:`aspose.threed.entities.Frustum.direction`'''
        raise NotImplementedError()
    
    @property
    def near_plane(self) -> float:
        '''Gets the frustum\'s near plane distance.'''
        raise NotImplementedError()
    
    @near_plane.setter
    def near_plane(self, value : float) -> None:
        '''Sets the frustum\'s near plane distance.'''
        raise NotImplementedError()
    
    @property
    def far_plane(self) -> float:
        '''Gets the frustum\'s far plane distance.'''
        raise NotImplementedError()
    
    @far_plane.setter
    def far_plane(self, value : float) -> None:
        '''Sets the frustum\'s far plane distance.'''
        raise NotImplementedError()
    
    @property
    def aspect(self) -> float:
        '''Gets the aspect ratio of the frustum'''
        raise NotImplementedError()
    
    @aspect.setter
    def aspect(self, value : float) -> None:
        '''Sets the aspect ratio of the frustum'''
        raise NotImplementedError()
    
    @property
    def ortho_height(self) -> float:
        '''Gets the height when frustum in orthographic projection.'''
        raise NotImplementedError()
    
    @ortho_height.setter
    def ortho_height(self, value : float) -> None:
        '''Sets the height when frustum in orthographic projection.'''
        raise NotImplementedError()
    
    @property
    def up(self) -> aspose.threed.utilities.Vector3:
        '''Gets the up direction of the camera'''
        raise NotImplementedError()
    
    @up.setter
    def up(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the up direction of the camera'''
        raise NotImplementedError()
    
    @property
    def look_at(self) -> aspose.threed.utilities.Vector3:
        '''Gets the the interested position that the camera is looking at.'''
        raise NotImplementedError()
    
    @look_at.setter
    def look_at(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the the interested position that the camera is looking at.'''
        raise NotImplementedError()
    
    @property
    def direction(self) -> aspose.threed.utilities.Vector3:
        '''Gets the direction that the camera is looking at.
        Changes on this property will also affects the :py:attr:`aspose.threed.entities.Frustum.look_at` and :py:attr:`aspose.threed.entities.Frustum.target`.'''
        raise NotImplementedError()
    
    @direction.setter
    def direction(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the direction that the camera is looking at.
        Changes on this property will also affects the :py:attr:`aspose.threed.entities.Frustum.look_at` and :py:attr:`aspose.threed.entities.Frustum.target`.'''
        raise NotImplementedError()
    
    @property
    def target(self) -> aspose.threed.Node:
        '''Gets the target that the camera is looking at.
        If the user supports this property, it should be prior to :py:attr:`aspose.threed.entities.Frustum.look_at` property.'''
        raise NotImplementedError()
    
    @target.setter
    def target(self, value : aspose.threed.Node) -> None:
        '''Sets the target that the camera is looking at.
        If the user supports this property, it should be prior to :py:attr:`aspose.threed.entities.Frustum.look_at` property.'''
        raise NotImplementedError()
    

class Geometry(aspose.threed.Entity):
    '''The base class of all renderable geometric objects (like :py:class:`aspose.threed.entities.Mesh`, :py:class:`aspose.threed.entities.NurbsSurface`, :py:class:`aspose.threed.entities.Patch` and etc.).
    
    
    
    The :py:class:`aspose.threed.entities.Geometry` base class supports:
    
    *
    
    *
    
    *'''
    
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Geometry` class.
        
        :param name: Name'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :returns: Created element uv'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element uv'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def get_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Gets a vertex element with specified type
        
        :param type: which vertex element type to find
        :returns: :py:class:`aspose.threed.entities.VertexElement` instance if found, otherwise null will be returned.'''
        raise NotImplementedError()
    
    def get_vertex_element_of_uv(self, texture_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Gets a :py:class:`aspose.threed.entities.VertexElementUV` instance with given texture mapping type
        
        :returns: VertexElementUV with the texture mapping type'''
        raise NotImplementedError()
    
    def add_element(self, element : aspose.threed.entities.VertexElement) -> None:
        '''Adds an existing vertex element to current geometry
        
        :param element: The vertex element to add'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def visible(self) -> bool:
        '''Gets if the geometry is visible'''
        raise NotImplementedError()
    
    @visible.setter
    def visible(self, value : bool) -> None:
        '''Sets if the geometry is visible'''
        raise NotImplementedError()
    
    @property
    def deformers(self) -> List[aspose.threed.deformers.Deformer]:
        '''Gets all deformers associated with this geometry.'''
        raise NotImplementedError()
    
    @property
    def control_points(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets all control points'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def vertex_elements(self) -> List[aspose.threed.entities.VertexElement]:
        '''Gets all vertex elements'''
        raise NotImplementedError()
    

class IIndexedVertexElement:
    '''VertexElement with indices data.'''
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class IMeshConvertible:
    '''Entities that implemented this interface can be converted to :py:class:`aspose.threed.entities.Mesh`'''
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    

class IOrientable:
    '''Orientable entities shall implement this interface.'''
    
    @property
    def direction(self) -> aspose.threed.utilities.Vector3:
        '''Gets the direction that the entity is looking at.'''
        raise NotImplementedError()
    
    @direction.setter
    def direction(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the direction that the entity is looking at.'''
        raise NotImplementedError()
    
    @property
    def target(self) -> aspose.threed.Node:
        '''Gets the target that the entity is looking at.'''
        raise NotImplementedError()
    
    @target.setter
    def target(self, value : aspose.threed.Node) -> None:
        '''Sets the target that the entity is looking at.'''
        raise NotImplementedError()
    

class Light(Frustum):
    '''The light illuminates the scene.
    
    
    
    The formula to calculate the total attenuation of light is:
    ``A = ConstantAttenuation + (Dist * LinearAttenuation) + ((Dist^2) * QuadraticAttenuation)``'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Light` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Light` class.
        
        :param name: Name'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, type : aspose.threed.entities.LightType) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Light` class.
        
        :param name: Name
        :param type: New light\'s type'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def rotation_mode(self) -> aspose.threed.entities.RotationMode:
        '''Gets the frustum\'s orientation mode
        This property only works when the :py:attr:`aspose.threed.entities.Frustum.target` is null.
        If the value is :py:attr:`aspose.threed.entities.RotationMode.FIXED_TARGET`, the direction is always calculated by the property :py:attr:`aspose.threed.entities.Frustum.look_at`
        Otherwise the :py:attr:`aspose.threed.entities.Frustum.look_at` is always calculated by the :py:attr:`aspose.threed.entities.Frustum.direction`'''
        raise NotImplementedError()
    
    @rotation_mode.setter
    def rotation_mode(self, value : aspose.threed.entities.RotationMode) -> None:
        '''Sets the frustum\'s orientation mode
        This property only works when the :py:attr:`aspose.threed.entities.Frustum.target` is null.
        If the value is :py:attr:`aspose.threed.entities.RotationMode.FIXED_TARGET`, the direction is always calculated by the property :py:attr:`aspose.threed.entities.Frustum.look_at`
        Otherwise the :py:attr:`aspose.threed.entities.Frustum.look_at` is always calculated by the :py:attr:`aspose.threed.entities.Frustum.direction`'''
        raise NotImplementedError()
    
    @property
    def near_plane(self) -> float:
        '''Gets the frustum\'s near plane distance.'''
        raise NotImplementedError()
    
    @near_plane.setter
    def near_plane(self, value : float) -> None:
        '''Sets the frustum\'s near plane distance.'''
        raise NotImplementedError()
    
    @property
    def far_plane(self) -> float:
        '''Gets the frustum\'s far plane distance.'''
        raise NotImplementedError()
    
    @far_plane.setter
    def far_plane(self, value : float) -> None:
        '''Sets the frustum\'s far plane distance.'''
        raise NotImplementedError()
    
    @property
    def aspect(self) -> float:
        '''Gets the aspect ratio of the frustum'''
        raise NotImplementedError()
    
    @aspect.setter
    def aspect(self, value : float) -> None:
        '''Sets the aspect ratio of the frustum'''
        raise NotImplementedError()
    
    @property
    def ortho_height(self) -> float:
        '''Gets the height when frustum in orthographic projection.'''
        raise NotImplementedError()
    
    @ortho_height.setter
    def ortho_height(self, value : float) -> None:
        '''Sets the height when frustum in orthographic projection.'''
        raise NotImplementedError()
    
    @property
    def up(self) -> aspose.threed.utilities.Vector3:
        '''Gets the up direction of the camera'''
        raise NotImplementedError()
    
    @up.setter
    def up(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the up direction of the camera'''
        raise NotImplementedError()
    
    @property
    def look_at(self) -> aspose.threed.utilities.Vector3:
        '''Gets the the interested position that the camera is looking at.'''
        raise NotImplementedError()
    
    @look_at.setter
    def look_at(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the the interested position that the camera is looking at.'''
        raise NotImplementedError()
    
    @property
    def direction(self) -> aspose.threed.utilities.Vector3:
        '''Gets the direction that the camera is looking at.
        Changes on this property will also affects the :py:attr:`aspose.threed.entities.Frustum.look_at` and :py:attr:`aspose.threed.entities.Frustum.target`.'''
        raise NotImplementedError()
    
    @direction.setter
    def direction(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the direction that the camera is looking at.
        Changes on this property will also affects the :py:attr:`aspose.threed.entities.Frustum.look_at` and :py:attr:`aspose.threed.entities.Frustum.target`.'''
        raise NotImplementedError()
    
    @property
    def target(self) -> aspose.threed.Node:
        '''Gets the target that the camera is looking at.
        If the user supports this property, it should be prior to :py:attr:`aspose.threed.entities.Frustum.look_at` property.'''
        raise NotImplementedError()
    
    @target.setter
    def target(self, value : aspose.threed.Node) -> None:
        '''Sets the target that the camera is looking at.
        If the user supports this property, it should be prior to :py:attr:`aspose.threed.entities.Frustum.look_at` property.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the light\'s color'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the light\'s color'''
        raise NotImplementedError()
    
    @property
    def light_type(self) -> aspose.threed.entities.LightType:
        '''Gets the light\'s type'''
        raise NotImplementedError()
    
    @light_type.setter
    def light_type(self, value : aspose.threed.entities.LightType) -> None:
        '''Sets the light\'s type'''
        raise NotImplementedError()
    
    @property
    def cast_light(self) -> bool:
        '''Gets if the current light instance can illuminate other objects.'''
        raise NotImplementedError()
    
    @cast_light.setter
    def cast_light(self, value : bool) -> None:
        '''Sets if the current light instance can illuminate other objects.'''
        raise NotImplementedError()
    
    @property
    def intensity(self) -> float:
        '''Gets the light\'s intensity, default value is 100'''
        raise NotImplementedError()
    
    @intensity.setter
    def intensity(self, value : float) -> None:
        '''Sets the light\'s intensity, default value is 100'''
        raise NotImplementedError()
    
    @property
    def hot_spot(self) -> float:
        '''Gets the hot spot cone angle(in degrees).'''
        raise NotImplementedError()
    
    @hot_spot.setter
    def hot_spot(self, value : float) -> None:
        '''Sets the hot spot cone angle(in degrees).'''
        raise NotImplementedError()
    
    @property
    def falloff(self) -> float:
        '''Gets the falloff cone angle (in degrees).'''
        raise NotImplementedError()
    
    @falloff.setter
    def falloff(self, value : float) -> None:
        '''Sets the falloff cone angle (in degrees).'''
        raise NotImplementedError()
    
    @property
    def constant_attenuation(self) -> float:
        '''Gets the constant attenuation to calculate the total attenuation of the light'''
        raise NotImplementedError()
    
    @constant_attenuation.setter
    def constant_attenuation(self, value : float) -> None:
        '''Sets the constant attenuation to calculate the total attenuation of the light'''
        raise NotImplementedError()
    
    @property
    def linear_attenuation(self) -> float:
        '''Gets the linear attenuation to calculate the total attenuation of the light'''
        raise NotImplementedError()
    
    @linear_attenuation.setter
    def linear_attenuation(self, value : float) -> None:
        '''Sets the linear attenuation to calculate the total attenuation of the light'''
        raise NotImplementedError()
    
    @property
    def quadratic_attenuation(self) -> float:
        '''Gets the quadratic attenuation to calculate the total attenuation of the light'''
        raise NotImplementedError()
    
    @quadratic_attenuation.setter
    def quadratic_attenuation(self, value : float) -> None:
        '''Sets the quadratic attenuation to calculate the total attenuation of the light'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets if the light can cast shadows on other objects.'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets if the light can cast shadows on other objects.'''
        raise NotImplementedError()
    
    @property
    def shadow_color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the shadow\'s color.'''
        raise NotImplementedError()
    
    @shadow_color.setter
    def shadow_color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the shadow\'s color.'''
        raise NotImplementedError()
    

class Line(Curve):
    '''A polyline is a path defined by a set of points with :py:attr:`aspose.threed.entities.Geometry.control_points`, and connected by :py:attr:`aspose.threed.entities.Line.segments`,
    which means it can also be a set of connected line segments.
    The line is usually a linear object, which means it cannot be used to represent a curve, in order to represent a curve, uses :py:class:`aspose.threed.entities.NurbsCurve`.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Line` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Line` class.
        
        :param name: Name.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @staticmethod
    def from_points(points : List[aspose.threed.utilities.Vector3]) -> aspose.threed.entities.Line:
        '''Construct a :py:class:`aspose.threed.entities.Line` instance from a set of points.'''
        raise NotImplementedError()
    
    def make_default_indices(self) -> None:
        '''Generate the sequence 0,1,2,3....:py:attr:`aspose.threed.entities.Geometry.control_points`.Length-1 to :py:attr:`aspose.threed.entities.Line.segments` so the ControlPoints can be used as a single line'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @property
    def visible(self) -> bool:
        '''Gets if the geometry is visible'''
        raise NotImplementedError()
    
    @visible.setter
    def visible(self, value : bool) -> None:
        '''Sets if the geometry is visible'''
        raise NotImplementedError()
    
    @property
    def segments(self) -> List[List[int]]:
        '''Gets the segments of the line'''
        raise NotImplementedError()
    

class LinearExtrusion(aspose.threed.Entity):
    '''Linear extrusion takes a 2D shape as input and extends the shape in the 3rd dimension.'''
    
    @overload
    def __init__(self) -> None:
        '''Constructor of instance :py:class:`aspose.threed.entities.LinearExtrusion`.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, shape : aspose.threed.profiles.Profile, height : float) -> None:
        '''Constructor of instance :py:class:`aspose.threed.entities.LinearExtrusion`.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert the extrusion to mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def shape(self) -> aspose.threed.profiles.Profile:
        '''The base shape to be extruded.'''
        raise NotImplementedError()
    
    @shape.setter
    def shape(self, value : aspose.threed.profiles.Profile) -> None:
        '''The base shape to be extruded.'''
        raise NotImplementedError()
    
    @property
    def direction(self) -> aspose.threed.utilities.Vector3:
        '''The direction of extrusion, default value is (0, 0, 1)'''
        raise NotImplementedError()
    
    @direction.setter
    def direction(self, value : aspose.threed.utilities.Vector3) -> None:
        '''The direction of extrusion, default value is (0, 0, 1)'''
        raise NotImplementedError()
    
    @property
    def height(self) -> float:
        '''The height of the extruded geometry, default value is 1.0'''
        raise NotImplementedError()
    
    @height.setter
    def height(self, value : float) -> None:
        '''The height of the extruded geometry, default value is 1.0'''
        raise NotImplementedError()
    
    @property
    def slices(self) -> int:
        '''The slices of the twisted extruded geometry, default value is 1.'''
        raise NotImplementedError()
    
    @slices.setter
    def slices(self, value : int) -> None:
        '''The slices of the twisted extruded geometry, default value is 1.'''
        raise NotImplementedError()
    
    @property
    def center(self) -> bool:
        '''If this value is false, the linear extrusion Z range is from 0 to height, otherwise the range is from -height/2 to height/2.'''
        raise NotImplementedError()
    
    @center.setter
    def center(self, value : bool) -> None:
        '''If this value is false, the linear extrusion Z range is from 0 to height, otherwise the range is from -height/2 to height/2.'''
        raise NotImplementedError()
    
    @property
    def twist_offset(self) -> aspose.threed.utilities.Vector3:
        '''The offset that used in twisting, default value is (0, 0, 0).'''
        raise NotImplementedError()
    
    @twist_offset.setter
    def twist_offset(self, value : aspose.threed.utilities.Vector3) -> None:
        '''The offset that used in twisting, default value is (0, 0, 0).'''
        raise NotImplementedError()
    
    @property
    def twist(self) -> float:
        '''The number of degrees of through which the shape is extruded.'''
        raise NotImplementedError()
    
    @twist.setter
    def twist(self, value : float) -> None:
        '''The number of degrees of through which the shape is extruded.'''
        raise NotImplementedError()
    

class Mesh(Geometry):
    '''A mesh is made of many n-sided polygons.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Mesh` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, height_map : aspose.threed.render.TextureData) -> None:
        '''Construct a mesh using specified height map,
        if the height map\'s pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
        The control point\'s x and y components are normalized pixel coordinate.
        
        :param height_map: Input height map'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, height_map : aspose.threed.render.TextureData, transform : aspose.threed.utilities.Matrix4) -> None:
        '''Construct a mesh using specified height map,
        if the height map\'s pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
        The control point\'s x and y components are normalized pixel coordinate.
        
        :param height_map: Input height map
        :param transform: The transform that applied on the control points'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, height_map : aspose.threed.render.TextureData, tri_mesh : bool, transform : aspose.threed.utilities.Matrix4) -> None:
        '''Construct a mesh using specified height map,
        if the height map\'s pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
        The control point\'s x and y components are normalized pixel coordinate.
        
        :param height_map: Input height map
        :param transform: The transform that applied on the control points'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Mesh` class.
        
        :param name: Name.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :returns: Created element uv'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element uv'''
        raise NotImplementedError()
    
    @overload
    def create_polygon(self, indices : List[int], offset : int, length : int) -> None:
        '''Creates a new polygon with all vertices defined in ``indices``.
        To create polygon vertex by vertex, please use :py:class:`aspose.threed.entities.PolygonBuilder`.
        
        :param indices: Array of the polygon indices, each index points to a control point that forms the polygon.
        :param offset: The offset of the first polygon index
        :param length: The length of the indices'''
        raise NotImplementedError()
    
    @overload
    def create_polygon(self, indices : List[int]) -> None:
        '''Creates a new polygon with all vertices defined in ``indices``.
        To create polygon vertex by vertex, please use :py:class:`aspose.threed.entities.PolygonBuilder`.
        
        :param indices: Array of the polygon indices, each index points to a control point that forms the polygon.'''
        raise NotImplementedError()
    
    @overload
    def create_polygon(self, v1 : int, v2 : int, v3 : int, v4 : int) -> None:
        '''Create a polygon with 4 vertices(quad)
        
        :param v1: Index of the first vertex
        :param v2: Index of the second vertex
        :param v3: Index of the third vertex
        :param v4: Index of the fourth vertex'''
        raise NotImplementedError()
    
    @overload
    def create_polygon(self, v1 : int, v2 : int, v3 : int) -> None:
        '''Create a polygon with 3 vertices(triangle)
        
        :param v1: Index of the first vertex
        :param v2: Index of the second vertex
        :param v3: Index of the third vertex'''
        raise NotImplementedError()
    
    @overload
    def optimize(self, vertex_elements : bool) -> aspose.threed.entities.Mesh:
        '''Optimize the mesh\'s memory usage by eliminating duplicated control points
        
        :param vertex_elements: Optimize duplicated vertex element data
        :returns: New mesh instance with compact memory usage'''
        raise NotImplementedError()
    
    @overload
    def optimize(self, vertex_elements : bool, tolerance_control_point : float, tolerance_normal : float, tolerance_uv : float) -> aspose.threed.entities.Mesh:
        '''Optimize the mesh\'s memory usage by eliminating duplicated control points
        
        :param vertex_elements: Optimize duplicated vertex element data
        :param tolerance_control_point: The tolerance for control point, default value is 1e-9
        :param tolerance_normal: The tolerance for normal/tangent/binormal default value is 1e-9
        :param tolerance_uv: The tolerance for uv, default value is 1e-9
        :returns: New mesh instance with compact memory usage'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def get_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Gets a vertex element with specified type
        
        :param type: which vertex element type to find
        :returns: :py:class:`aspose.threed.entities.VertexElement` instance if found, otherwise null will be returned.'''
        raise NotImplementedError()
    
    def get_vertex_element_of_uv(self, texture_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Gets a :py:class:`aspose.threed.entities.VertexElementUV` instance with given texture mapping type
        
        :returns: VertexElementUV with the texture mapping type'''
        raise NotImplementedError()
    
    def add_element(self, element : aspose.threed.entities.VertexElement) -> None:
        '''Adds an existing vertex element to current geometry
        
        :param element: The vertex element to add'''
        raise NotImplementedError()
    
    def get_polygon_size(self, index : int) -> int:
        '''Gets the vertex count of the specified polygon.
        
        :param index: Index.
        :returns: The polygon size.'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Gets the Mesh instance from current entity.
        
        :returns: Returns current instance.'''
        raise NotImplementedError()
    
    @staticmethod
    def do_boolean(op : aspose.threed.entities.BooleanOperation, a : aspose.threed.entities.Mesh, transform_a : Optional[aspose.threed.utilities.Matrix4], b : aspose.threed.entities.Mesh, transform_b : Optional[aspose.threed.utilities.Matrix4]) -> aspose.threed.entities.Mesh:
        raise NotImplementedError()
    
    @staticmethod
    def union(a : aspose.threed.entities.Mesh, b : aspose.threed.entities.Mesh) -> aspose.threed.entities.Mesh:
        '''Calculate the union of two meshes
        
        :param a: First mesh
        :param b: Second mesh
        :returns: Result mesh'''
        raise NotImplementedError()
    
    @staticmethod
    def difference(a : aspose.threed.entities.Mesh, b : aspose.threed.entities.Mesh) -> aspose.threed.entities.Mesh:
        '''Calculate the difference of two meshes
        
        :param a: First mesh
        :param b: Second mesh
        :returns: Result mesh'''
        raise NotImplementedError()
    
    @staticmethod
    def intersect(a : aspose.threed.entities.Mesh, b : aspose.threed.entities.Mesh) -> aspose.threed.entities.Mesh:
        '''Calculate the intersection of two meshes
        
        :param a: First mesh
        :param b: Second mesh
        :returns: Result mesh'''
        raise NotImplementedError()
    
    def triangulate(self) -> aspose.threed.entities.Mesh:
        '''Return triangulated mesh
        
        :returns: Current mesh if current mesh is already triangulated, otherwise a new triangulated mesh will be calculated and returned'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def visible(self) -> bool:
        '''Gets if the geometry is visible'''
        raise NotImplementedError()
    
    @visible.setter
    def visible(self, value : bool) -> None:
        '''Sets if the geometry is visible'''
        raise NotImplementedError()
    
    @property
    def deformers(self) -> List[aspose.threed.deformers.Deformer]:
        '''Gets all deformers associated with this geometry.'''
        raise NotImplementedError()
    
    @property
    def control_points(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets all control points'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def vertex_elements(self) -> List[aspose.threed.entities.VertexElement]:
        '''Gets all vertex elements'''
        raise NotImplementedError()
    
    @property
    def edges(self) -> List[int]:
        '''Gets edges of the Mesh.  Edge is optional in mesh, so it can be empty.'''
        raise NotImplementedError()
    
    @property
    def polygon_count(self) -> int:
        '''Gets the count of polygons'''
        raise NotImplementedError()
    
    @property
    def polygons(self) -> List[List[int]]:
        '''Gets the polygons definition of the mesh'''
        raise NotImplementedError()
    

class NurbsCurve(Curve):
    '''`NURBS curve <https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline>` is a curve represented by NURBS(Non-uniform rational basis spline),
    A NURBS curve is defined by its :py:attr:`aspose.threed.entities.NurbsCurve.order`, a set of weighted :py:attr:`aspose.threed.entities.Geometry.control_points` and a :py:attr:`aspose.threed.entities.NurbsCurve.KnotVectors`
    The w component in control point is used as control point\'s weight, whatever it is a :py:attr:`aspose.threed.entities.CurveDimension.TWO_DIMENSIONAL` or :py:attr:`aspose.threed.entities.CurveDimension.THREE_DIMENSIONAL`'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.NurbsCurve` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.NurbsCurve` class.
        
        :param name: Name'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def evaluate(self, steps : int) -> List[aspose.threed.utilities.Vector4]:
        '''Evaluate the NURBS curve
        
        :param steps: The evaluation frequency between two neighbor knots, default value is 20
        :returns: Points in the curve'''
        raise NotImplementedError()
    
    def evaluate_at(self, u : float) -> aspose.threed.utilities.Vector4:
        '''Evaluate the curve\'s point at specified position
        
        :param u: The position in the curve, between 0 and 1'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @property
    def order(self) -> int:
        '''Gets the order of a NURBS curve, it defines the number of nearby control points that influence any given point on the curve.'''
        raise NotImplementedError()
    
    @order.setter
    def order(self, value : int) -> None:
        '''Sets the order of a NURBS curve, it defines the number of nearby control points that influence any given point on the curve.'''
        raise NotImplementedError()
    
    @property
    def dimension(self) -> aspose.threed.entities.CurveDimension:
        '''Gets the curve\'s dimension.'''
        raise NotImplementedError()
    
    @dimension.setter
    def dimension(self, value : aspose.threed.entities.CurveDimension) -> None:
        '''Sets the curve\'s dimension.'''
        raise NotImplementedError()
    
    @property
    def curve_type(self) -> aspose.threed.entities.NurbsType:
        '''Gets the type of the curve.'''
        raise NotImplementedError()
    
    @curve_type.setter
    def curve_type(self, value : aspose.threed.entities.NurbsType) -> None:
        '''Sets the type of the curve.'''
        raise NotImplementedError()
    
    @property
    def rational(self) -> bool:
        '''Gets whether it is rational, this value indicates whether this :py:class:`aspose.threed.entities.NurbsCurve` is rational spline or non-rational spline.
        Non-rational B-spline is a special case of rational B-splines.'''
        raise NotImplementedError()
    
    @rational.setter
    def rational(self, value : bool) -> None:
        '''Sets whether it is rational, this value indicates whether this :py:class:`aspose.threed.entities.NurbsCurve` is rational spline or non-rational spline.
        Non-rational B-spline is a special case of rational B-splines.'''
        raise NotImplementedError()
    

class NurbsDirection:
    '''A 3D :py:class:`aspose.threed.entities.NurbsSurface` has two direction, the :py:attr:`aspose.threed.entities.NurbsSurface.u` and :py:attr:`aspose.threed.entities.NurbsSurface.v`, the :py:class:`aspose.threed.entities.NurbsDirection` defines data for each direction.
    A direction is actually a NURBS curve, that means it\'s also defined by its :py:attr:`aspose.threed.entities.NurbsDirection.order`, a :py:attr:`aspose.threed.entities.NurbsDirection.KnotVectors`, and a set of weighted control points(defined in :py:class:`aspose.threed.entities.NurbsSurface`).'''
    
    def __init__(self) -> None:
        raise NotImplementedError()
    
    @property
    def order(self) -> int:
        '''Gets the order of a NURBS curve, it defines the number of nearby control points that influence any given point on the curve.'''
        raise NotImplementedError()
    
    @order.setter
    def order(self, value : int) -> None:
        '''Sets the order of a NURBS curve, it defines the number of nearby control points that influence any given point on the curve.'''
        raise NotImplementedError()
    
    @property
    def divisions(self) -> int:
        '''Gets the number of divisions between adjacent control points in current direction.'''
        raise NotImplementedError()
    
    @divisions.setter
    def divisions(self, value : int) -> None:
        '''Sets the number of divisions between adjacent control points in current direction.'''
        raise NotImplementedError()
    
    @property
    def type(self) -> aspose.threed.entities.NurbsType:
        '''Gets the type of the current direction.'''
        raise NotImplementedError()
    
    @type.setter
    def type(self, value : aspose.threed.entities.NurbsType) -> None:
        '''Sets the type of the current direction.'''
        raise NotImplementedError()
    
    @property
    def count(self) -> int:
        '''Gets the count of control points in current direction.'''
        raise NotImplementedError()
    
    @count.setter
    def count(self, value : int) -> None:
        '''Sets the count of control points in current direction.'''
        raise NotImplementedError()
    

class NurbsSurface(Geometry):
    ''':py:class:`aspose.threed.entities.NurbsSurface` is a surface represented by `NURBS(Non-uniform rational basis spline) <https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline>`,
    A :py:class:`aspose.threed.entities.NurbsSurface` is defined by two :py:class:`aspose.threed.entities.NurbsDirection`:py:attr:`aspose.threed.entities.NurbsSurface.u` and :py:attr:`aspose.threed.entities.NurbsSurface.v`.
    The w component in control point is used as control point\'s weight whatever the direction\'s type is a :py:attr:`aspose.threed.entities.CurveDimension.TWO_DIMENSIONAL` or :py:attr:`aspose.threed.entities.CurveDimension.THREE_DIMENSIONAL`'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.NurbsSurface` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.NurbsSurface` class.
        
        :param name: Name.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :returns: Created element uv'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element uv'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def get_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Gets a vertex element with specified type
        
        :param type: which vertex element type to find
        :returns: :py:class:`aspose.threed.entities.VertexElement` instance if found, otherwise null will be returned.'''
        raise NotImplementedError()
    
    def get_vertex_element_of_uv(self, texture_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Gets a :py:class:`aspose.threed.entities.VertexElementUV` instance with given texture mapping type
        
        :returns: VertexElementUV with the texture mapping type'''
        raise NotImplementedError()
    
    def add_element(self, element : aspose.threed.entities.VertexElement) -> None:
        '''Adds an existing vertex element to current geometry
        
        :param element: The vertex element to add'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert the NURBS surface to the mesh'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def visible(self) -> bool:
        '''Gets if the geometry is visible'''
        raise NotImplementedError()
    
    @visible.setter
    def visible(self, value : bool) -> None:
        '''Sets if the geometry is visible'''
        raise NotImplementedError()
    
    @property
    def deformers(self) -> List[aspose.threed.deformers.Deformer]:
        '''Gets all deformers associated with this geometry.'''
        raise NotImplementedError()
    
    @property
    def control_points(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets all control points'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def vertex_elements(self) -> List[aspose.threed.entities.VertexElement]:
        '''Gets all vertex elements'''
        raise NotImplementedError()
    
    @property
    def u(self) -> aspose.threed.entities.NurbsDirection:
        '''Gets the NURBS surface\'s U direction'''
        raise NotImplementedError()
    
    @property
    def v(self) -> aspose.threed.entities.NurbsDirection:
        '''Gets the NURBS surface\'s V direction'''
        raise NotImplementedError()
    

class Patch(Geometry):
    '''A :py:class:`aspose.threed.entities.Patch` is a parametric modeling surface, similar to :py:class:`aspose.threed.entities.NurbsSurface`, it\'s also defined by two
    :py:class:`aspose.threed.entities.PatchDirection`, the :py:attr:`aspose.threed.entities.Patch.u` and :py:attr:`aspose.threed.entities.Patch.v`.
    
    But difference between :py:class:`aspose.threed.entities.Patch` and :py:class:`aspose.threed.entities.NurbsSurface` is that the :py:class:`aspose.threed.entities.PatchDirection` curve
    can be one of :py:attr:`aspose.threed.entities.PatchDirectionType.BEZIER`, :py:attr:`aspose.threed.entities.PatchDirectionType.QUADRATIC_BEZIER`, :py:attr:`aspose.threed.entities.PatchDirectionType.BASIS_SPLINE`, :py:attr:`aspose.threed.entities.PatchDirectionType.CARDINAL_SPLINE` and :py:attr:`aspose.threed.entities.PatchDirectionType.LINEAR`'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Patch` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Patch` class.
        
        :param name: Name.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :returns: Created element uv'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element uv'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def get_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Gets a vertex element with specified type
        
        :param type: which vertex element type to find
        :returns: :py:class:`aspose.threed.entities.VertexElement` instance if found, otherwise null will be returned.'''
        raise NotImplementedError()
    
    def get_vertex_element_of_uv(self, texture_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Gets a :py:class:`aspose.threed.entities.VertexElementUV` instance with given texture mapping type
        
        :returns: VertexElementUV with the texture mapping type'''
        raise NotImplementedError()
    
    def add_element(self, element : aspose.threed.entities.VertexElement) -> None:
        '''Adds an existing vertex element to current geometry
        
        :param element: The vertex element to add'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def visible(self) -> bool:
        '''Gets if the geometry is visible'''
        raise NotImplementedError()
    
    @visible.setter
    def visible(self, value : bool) -> None:
        '''Sets if the geometry is visible'''
        raise NotImplementedError()
    
    @property
    def deformers(self) -> List[aspose.threed.deformers.Deformer]:
        '''Gets all deformers associated with this geometry.'''
        raise NotImplementedError()
    
    @property
    def control_points(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets all control points'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def vertex_elements(self) -> List[aspose.threed.entities.VertexElement]:
        '''Gets all vertex elements'''
        raise NotImplementedError()
    
    @property
    def u(self) -> aspose.threed.entities.PatchDirection:
        '''Gets the u direction.'''
        raise NotImplementedError()
    
    @property
    def v(self) -> aspose.threed.entities.PatchDirection:
        '''Gets the v direction.'''
        raise NotImplementedError()
    

class PatchDirection:
    '''Patch\'s U and V direction.'''
    
    def __init__(self) -> None:
        raise NotImplementedError()
    
    @property
    def type(self) -> aspose.threed.entities.PatchDirectionType:
        '''Gets the patch\'s type.'''
        raise NotImplementedError()
    
    @type.setter
    def type(self, value : aspose.threed.entities.PatchDirectionType) -> None:
        '''Sets the patch\'s type.'''
        raise NotImplementedError()
    
    @property
    def divisions(self) -> int:
        '''Gets the number of divisions between adjacent control points.'''
        raise NotImplementedError()
    
    @divisions.setter
    def divisions(self, value : int) -> None:
        '''Sets the number of divisions between adjacent control points.'''
        raise NotImplementedError()
    
    @property
    def control_points(self) -> int:
        '''Gets the count of control points in current direction.'''
        raise NotImplementedError()
    
    @control_points.setter
    def control_points(self, value : int) -> None:
        '''Sets the count of control points in current direction.'''
        raise NotImplementedError()
    
    @property
    def closed(self) -> bool:
        '''Gets a value indicating whether this :py:class:`aspose.threed.entities.PatchDirection` is a closed curve.'''
        raise NotImplementedError()
    
    @closed.setter
    def closed(self, value : bool) -> None:
        '''Sets a value indicating whether this :py:class:`aspose.threed.entities.PatchDirection` is a closed curve.'''
        raise NotImplementedError()
    

class Plane(Primitive):
    '''Parameterized plane.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Plane` with default size 1x1.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, length : float, width : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Plane`.
        
        :param length: Length of the plane.
        :param width: Width of the plane.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, length : float, width : float, length_segments : int, width_segments : int) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Plane`.
        
        :param name: Name.
        :param length: Length of the plane.
        :param width: Width of the plane.
        :param length_segments: Length segments.
        :param width_segments: Width segments.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def up(self) -> aspose.threed.utilities.Vector3:
        '''Gets the up vector of the plane, default value is (0, 1, 0), this affects the generation of the plane'''
        raise NotImplementedError()
    
    @up.setter
    def up(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the up vector of the plane, default value is (0, 1, 0), this affects the generation of the plane'''
        raise NotImplementedError()
    
    @property
    def length(self) -> float:
        '''Gets the length of the plane.'''
        raise NotImplementedError()
    
    @length.setter
    def length(self, value : float) -> None:
        '''Sets the length of the plane.'''
        raise NotImplementedError()
    
    @property
    def width(self) -> float:
        '''Gets the width of the plane.'''
        raise NotImplementedError()
    
    @width.setter
    def width(self, value : float) -> None:
        '''Sets the width of the plane.'''
        raise NotImplementedError()
    
    @property
    def length_segments(self) -> int:
        '''Gets the length segments.'''
        raise NotImplementedError()
    
    @length_segments.setter
    def length_segments(self, value : int) -> None:
        '''Sets the length segments.'''
        raise NotImplementedError()
    
    @property
    def width_segments(self) -> int:
        '''Gets the width segments.'''
        raise NotImplementedError()
    
    @width_segments.setter
    def width_segments(self, value : int) -> None:
        '''Sets the width segments.'''
        raise NotImplementedError()
    

class PointCloud(Geometry):
    '''The point cloud contains no topology information but only the control points and the vertex elements.'''
    
    @overload
    def __init__(self, name : str) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.PointCloud`
        
        :param name: The name of this entity'''
        raise NotImplementedError()
    
    @overload
    def __init__(self) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.PointCloud`'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :returns: Created element uv'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element uv'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def from_geometry(g : aspose.threed.entities.Geometry) -> aspose.threed.entities.PointCloud:
        '''Create a new PointCloud instance from a geometry object'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def from_geometry(g : aspose.threed.entities.Geometry, density : int) -> aspose.threed.entities.PointCloud:
        '''Create a new point cloud instance from a geometry object.
        Density is the number of points per unit triangle(Unit triangle are the triangle with maximum surface area from the mesh)
        
        :param g: Mesh or other geometry instance
        :param density: Number of points per unit triangle'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def get_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Gets a vertex element with specified type
        
        :param type: which vertex element type to find
        :returns: :py:class:`aspose.threed.entities.VertexElement` instance if found, otherwise null will be returned.'''
        raise NotImplementedError()
    
    def get_vertex_element_of_uv(self, texture_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Gets a :py:class:`aspose.threed.entities.VertexElementUV` instance with given texture mapping type
        
        :returns: VertexElementUV with the texture mapping type'''
        raise NotImplementedError()
    
    def add_element(self, element : aspose.threed.entities.VertexElement) -> None:
        '''Adds an existing vertex element to current geometry
        
        :param element: The vertex element to add'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def visible(self) -> bool:
        '''Gets if the geometry is visible'''
        raise NotImplementedError()
    
    @visible.setter
    def visible(self, value : bool) -> None:
        '''Sets if the geometry is visible'''
        raise NotImplementedError()
    
    @property
    def deformers(self) -> List[aspose.threed.deformers.Deformer]:
        '''Gets all deformers associated with this geometry.'''
        raise NotImplementedError()
    
    @property
    def control_points(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets all control points'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def vertex_elements(self) -> List[aspose.threed.entities.VertexElement]:
        '''Gets all vertex elements'''
        raise NotImplementedError()
    

class PolygonBuilder:
    '''A helper class to build polygon for :py:class:`aspose.threed.entities.Mesh`'''
    
    def __init__(self, mesh : aspose.threed.entities.Mesh) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.PolygonBuilder` class.
        
        :param mesh: On which mesh to build polygon.'''
        raise NotImplementedError()
    
    def begin(self) -> None:
        '''Begins to add a new polygon'''
        raise NotImplementedError()
    
    def add_vertex(self, index : int) -> None:
        '''Adds a vertex index to the polygon'''
        raise NotImplementedError()
    
    def end(self) -> None:
        '''Finishes the polygon creation'''
        raise NotImplementedError()
    

class PolygonModifier:
    '''Utilities to modify polygons'''
    
    @overload
    @staticmethod
    def triangulate(scene : aspose.threed.Scene) -> None:
        '''Convert all polygon-based meshes into full triangle mesh
        
        :param scene: The scene to process'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def triangulate(mesh : aspose.threed.entities.Mesh) -> aspose.threed.entities.Mesh:
        '''Convert a polygon-based mesh into full triangle mesh
        
        :param mesh: The original non-triangle mesh
        :returns: The generated new triangle mesh'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def triangulate(control_points : List[aspose.threed.utilities.Vector4], polygons : List[List[int]], generate_normals : bool, nor_out : List[List[aspose.threed.utilities.Vector3]]) -> List[List[int]]:
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def triangulate(control_points : List[aspose.threed.utilities.Vector4], polygons : List[List[int]]) -> List[List[int]]:
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def triangulate(control_points : List[aspose.threed.utilities.Vector4], polygon : List[int]) -> List[List[int]]:
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def triangulate(control_points : List[aspose.threed.utilities.Vector4]) -> List[List[int]]:
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def merge_mesh(scene : aspose.threed.Scene) -> aspose.threed.entities.Mesh:
        '''Convert a whole scene to a single transformed mesh
        Vertex elements like normal/texture coordinates are not supported yet
        
        :param scene: The scene to merge
        :returns: The merged mesh'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def merge_mesh(nodes : List[aspose.threed.Node]) -> aspose.threed.entities.Mesh:
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def merge_mesh(node : aspose.threed.Node) -> aspose.threed.entities.Mesh:
        '''Convert a whole node to a single transformed mesh
        Vertex elements like normal/texture coordinates are not supported yet
        
        :param node: The node to merge
        :returns: Merged mesh'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def scale(scene : aspose.threed.Scene, scale : aspose.threed.utilities.Vector3) -> aspose.threed.Scene:
        '''Scale all geometries(Scale the control points not the transformation matrix) in this scene
        
        :param scene: The scene to scale
        :param scale: The scale factor'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def scale(node : aspose.threed.Node, scale : aspose.threed.utilities.Vector3) -> None:
        '''Scale all geometries(Scale the control points not the transformation matrix) in this node
        
        :param node: The node to scale
        :param scale: The scale factor'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def generate_uv(mesh : aspose.threed.entities.Mesh, normals : aspose.threed.entities.VertexElementNormal) -> aspose.threed.entities.VertexElementUV:
        '''Generate UV data from the given input mesh and specified normal data.
        
        :param mesh: The input mesh
        :param normals: The normal data
        :returns: Generated UV data'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def generate_uv(mesh : aspose.threed.entities.Mesh) -> aspose.threed.entities.VertexElementUV:
        '''Generate UV data from the given input mesh
        
        :param mesh: The input mesh
        :returns: Generated UV data'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def split_mesh(node : aspose.threed.Node, policy : aspose.threed.entities.SplitMeshPolicy, create_child_nodes : bool, remove_old_mesh : bool) -> None:
        '''Split mesh into sub-meshes by :py:class:`aspose.threed.entities.VertexElementMaterial`.
        Each sub-mesh will use only one material.
        Perform mesh splitting on a node
        
        :param create_child_nodes: Create child nodes for each sub-mesh.
        :param remove_old_mesh: Remove the old mesh after split, if this parameter is false, the old and new meshes will co-exists.'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def split_mesh(scene : aspose.threed.Scene, policy : aspose.threed.entities.SplitMeshPolicy, remove_old_mesh : bool) -> None:
        '''Split mesh into sub-meshes by :py:class:`aspose.threed.entities.VertexElementMaterial`.
        Each sub-mesh will use only one material.
        Perform mesh splitting on all nodes of the scene.'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def split_mesh(mesh : aspose.threed.entities.Mesh, policy : aspose.threed.entities.SplitMeshPolicy) -> List[aspose.threed.entities.Mesh]:
        '''Split mesh into sub-meshes by :py:class:`aspose.threed.entities.VertexElementMaterial`.
        Each sub-mesh will use only one material.
        The original mesh will not get changed.
        
        :returns: New splitted meshes'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def build_tangent_binormal(scene : aspose.threed.Scene) -> None:
        '''This will create tangent and binormal on all meshes of the scene
        Normal is required, if normal is not existing on the mesh, it will also create the normal data from position.
        UV is also required, the mesh will be ignored if no UV is defined.'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def build_tangent_binormal(mesh : aspose.threed.entities.Mesh) -> None:
        '''This will create tangent and binormal on the mesh
        Normal is required, if normal is not existing on the mesh, it will also create the normal data from position.
        UV is also required, an exception will be raised if no UV found.'''
        raise NotImplementedError()
    
    @staticmethod
    def apply_transform(node : aspose.threed.Node, transform : aspose.threed.utilities.Matrix4) -> None:
        '''Apply transform matrix on control points of all geometries
        
        :param node: Which node\'s geometries will be applied with given transform
        :param transform: The transformation matrix that will be applied to control points.'''
        raise NotImplementedError()
    
    @staticmethod
    def generate_normal(mesh : aspose.threed.entities.Mesh) -> aspose.threed.entities.VertexElementNormal:
        '''Generate normal data from Mesh definition
        
        :returns: :py:class:`aspose.threed.entities.VertexElementNormal` instance with normal data.'''
        raise NotImplementedError()
    

class Primitive(aspose.threed.Entity):
    '''Base class for all primitives'''
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    

class Pyramid(Primitive):
    '''Parameterized pyramid.'''
    
    @overload
    def __init__(self) -> None:
        '''Construct a new pyramid instance with default bottom area(10, 10) and default height(5)'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, xbottom : float, ybottom : float, height : float) -> None:
        '''Construct a new pyramid instance with specified bottom area
        
        :param xbottom: The x-direction length of the bottom
        :param ybottom: The y-direction length of the bottom
        :param height: The height of the pyramid'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, xbottom : float, ybottom : float, xtop : float, ytop : float, height : float) -> None:
        '''Construct a new pyramid instance with specified bottom area and top area and height.
        
        :param xbottom: The x-direction length of the bottom area
        :param ybottom: The y-direction length of the bottom area
        :param xtop: The x-direction length of the top area
        :param ytop: The y-direction length of the top area
        :param height: The height of the pyramid'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, xbottom : float, ybottom : float, xtop : float, ytop : float, height : float) -> None:
        '''Construct a new pyramid instance with specified bottom area and top area and height.
        
        :param name: The name of the pyramid
        :param xbottom: The x-direction length of the bottom area
        :param ybottom: The y-direction length of the bottom area
        :param xtop: The x-direction length of the top area
        :param ytop: The y-direction length of the top area
        :param height: The height of the pyramid'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def bottom_area(self) -> aspose.threed.utilities.Vector2:
        '''Area of the bottom cap'''
        raise NotImplementedError()
    
    @bottom_area.setter
    def bottom_area(self, value : aspose.threed.utilities.Vector2) -> None:
        '''Area of the bottom cap'''
        raise NotImplementedError()
    
    @property
    def top_area(self) -> aspose.threed.utilities.Vector2:
        '''Area of the top cap'''
        raise NotImplementedError()
    
    @top_area.setter
    def top_area(self, value : aspose.threed.utilities.Vector2) -> None:
        '''Area of the top cap'''
        raise NotImplementedError()
    
    @property
    def bottom_offset(self) -> aspose.threed.utilities.Vector3:
        '''Offset for bottom vertices'''
        raise NotImplementedError()
    
    @bottom_offset.setter
    def bottom_offset(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Offset for bottom vertices'''
        raise NotImplementedError()
    
    @property
    def height(self) -> float:
        '''Height of the pyramid'''
        raise NotImplementedError()
    
    @height.setter
    def height(self, value : float) -> None:
        '''Height of the pyramid'''
        raise NotImplementedError()
    

class RectangularTorus(Primitive):
    '''Parameterized rectangular torus.'''
    
    @overload
    def __init__(self) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.RectangularTorus`'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.RectangularTorus`'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert this primitive to :py:class:`aspose.threed.entities.Mesh`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def inner_radius(self) -> float:
        '''The inner radius of the rectangular torus
        Default value is 17'''
        raise NotImplementedError()
    
    @inner_radius.setter
    def inner_radius(self, value : float) -> None:
        '''The inner radius of the rectangular torus
        Default value is 17'''
        raise NotImplementedError()
    
    @property
    def outer_radius(self) -> float:
        '''The outer radius of the rectangular torus
        Default value is 20'''
        raise NotImplementedError()
    
    @outer_radius.setter
    def outer_radius(self, value : float) -> None:
        '''The outer radius of the rectangular torus
        Default value is 20'''
        raise NotImplementedError()
    
    @property
    def height(self) -> float:
        '''The height of the rectangular torus.
        Default value is 20'''
        raise NotImplementedError()
    
    @height.setter
    def height(self, value : float) -> None:
        '''The height of the rectangular torus.
        Default value is 20'''
        raise NotImplementedError()
    
    @property
    def arc(self) -> float:
        '''The total angle of the arc, measured in radian.
        Default value is PI'''
        raise NotImplementedError()
    
    @arc.setter
    def arc(self, value : float) -> None:
        '''The total angle of the arc, measured in radian.
        Default value is PI'''
        raise NotImplementedError()
    
    @property
    def angle_start(self) -> float:
        '''The start angle of the arc, measured in radian.
        Default value is 0'''
        raise NotImplementedError()
    
    @angle_start.setter
    def angle_start(self, value : float) -> None:
        '''The start angle of the arc, measured in radian.
        Default value is 0'''
        raise NotImplementedError()
    
    @property
    def radial_segments(self) -> int:
        '''The radial segments, default value is 10'''
        raise NotImplementedError()
    
    @radial_segments.setter
    def radial_segments(self, value : int) -> None:
        '''The radial segments, default value is 10'''
        raise NotImplementedError()
    

class RevolvedAreaSolid(aspose.threed.Entity):
    '''This class represents a solid model by revolving a cross section provided by a profile about an axis.'''
    
    def __init__(self) -> None:
        '''Initialize an SceneObject.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert the :py:class:`aspose.threed.entities.RevolvedAreaSolid` into a mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def angle_start(self) -> float:
        '''Gets the starting angle of the revolving procedure, measured in radian, default value is 0.'''
        raise NotImplementedError()
    
    @angle_start.setter
    def angle_start(self, value : float) -> None:
        '''Sets the starting angle of the revolving procedure, measured in radian, default value is 0.'''
        raise NotImplementedError()
    
    @property
    def angle_end(self) -> float:
        '''Gets the ending angle of the revolving procedure, measured in radian, default value is pi.'''
        raise NotImplementedError()
    
    @angle_end.setter
    def angle_end(self, value : float) -> None:
        '''Sets the ending angle of the revolving procedure, measured in radian, default value is pi.'''
        raise NotImplementedError()
    
    @property
    def axis(self) -> aspose.threed.utilities.Vector3:
        '''Gets the axis direction, default value is (0, 1, 0).'''
        raise NotImplementedError()
    
    @axis.setter
    def axis(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the axis direction, default value is (0, 1, 0).'''
        raise NotImplementedError()
    
    @property
    def origin(self) -> aspose.threed.utilities.Vector3:
        '''Gets the origin point of the revolving, default value is (0, 0, 0).'''
        raise NotImplementedError()
    
    @origin.setter
    def origin(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the origin point of the revolving, default value is (0, 0, 0).'''
        raise NotImplementedError()
    
    @property
    def shape(self) -> aspose.threed.profiles.Profile:
        '''Gets the base profile used to revolve.'''
        raise NotImplementedError()
    
    @shape.setter
    def shape(self, value : aspose.threed.profiles.Profile) -> None:
        '''Sets the base profile used to revolve.'''
        raise NotImplementedError()
    

class Shape(Geometry):
    '''The shape describes the deformation on a set of control points, which is similar to the cluster deformer in Maya.
    For example, we can add a shape to a created geometry.
    And the shape and the geometry have the same topological information but different position of the control points.
    With varying amounts of influence, the geometry performs a deformation effect.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Shape` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Shape` class.
        
        :param name: Name'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element(self, type : aspose.threed.entities.VertexElementType, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElement:
        '''Creates a vertex element with specified type and add it to the geometry.
        
        :param type: Vertex element type
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element.'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :returns: Created element uv'''
        raise NotImplementedError()
    
    @overload
    def create_element_uv(self, uv_mapping : aspose.threed.entities.TextureMapping, mapping_mode : aspose.threed.entities.MappingMode, reference_mode : aspose.threed.entities.ReferenceMode) -> aspose.threed.entities.VertexElementUV:
        '''Creates a :py:class:`aspose.threed.entities.VertexElementUV` with given texture mapping type.
        
        :param uv_mapping: Which texture mapping type to create
        :param mapping_mode: Default mapping mode
        :param reference_mode: Default reference mode
        :returns: Created element uv'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def get_element(self, type : aspose.threed.entities.VertexElementType) -> aspose.threed.entities.VertexElement:
        '''Gets a vertex element with specified type
        
        :param type: which vertex element type to find
        :returns: :py:class:`aspose.threed.entities.VertexElement` instance if found, otherwise null will be returned.'''
        raise NotImplementedError()
    
    def get_vertex_element_of_uv(self, texture_mapping : aspose.threed.entities.TextureMapping) -> aspose.threed.entities.VertexElementUV:
        '''Gets a :py:class:`aspose.threed.entities.VertexElementUV` instance with given texture mapping type
        
        :returns: VertexElementUV with the texture mapping type'''
        raise NotImplementedError()
    
    def add_element(self, element : aspose.threed.entities.VertexElement) -> None:
        '''Adds an existing vertex element to current geometry
        
        :param element: The vertex element to add'''
        raise NotImplementedError()
    
    @staticmethod
    def from_control_points(control_points : List[aspose.threed.utilities.Vector3]) -> aspose.threed.entities.Shape:
        '''Create a shape with specified control points with a default indices.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def visible(self) -> bool:
        '''Gets if the geometry is visible'''
        raise NotImplementedError()
    
    @visible.setter
    def visible(self, value : bool) -> None:
        '''Sets if the geometry is visible'''
        raise NotImplementedError()
    
    @property
    def deformers(self) -> List[aspose.threed.deformers.Deformer]:
        '''Gets all deformers associated with this geometry.'''
        raise NotImplementedError()
    
    @property
    def control_points(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets all control points'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def vertex_elements(self) -> List[aspose.threed.entities.VertexElement]:
        '''Gets all vertex elements'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices.'''
        raise NotImplementedError()
    

class Skeleton(aspose.threed.Entity):
    '''The :py:class:`aspose.threed.entities.Skeleton` is mainly used by CAD software to help designer to manipulate the transformation of skeletal structure, it\'s usually useless outside the CAD softwares.
    To make the skeleton hierarchy acts like one object in CAD software, it\'s necessary to mark the top :py:class:`aspose.threed.entities.Skeleton` node as the root one by setting :py:attr:`aspose.threed.entities.Skeleton.type` to :py:attr:`aspose.threed.entities.SkeletonType.SKELETON`,
    and all children set to :py:attr:`aspose.threed.entities.SkeletonType.BONE`'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Skeleton` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Skeleton` class.
        
        :param name: Name.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, type : aspose.threed.entities.SkeletonType) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Skeleton` class.
        
        :param name: Entity\'s name.
        :param type: Skeleton type'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def size(self) -> float:
        '''Gets the limb node size that used in CAD software to represent the size of the bone.'''
        raise NotImplementedError()
    
    @size.setter
    def size(self, value : float) -> None:
        '''Sets the limb node size that used in CAD software to represent the size of the bone.'''
        raise NotImplementedError()
    
    @property
    def type(self) -> aspose.threed.entities.SkeletonType:
        '''Gets the type of the skeleton.'''
        raise NotImplementedError()
    
    @type.setter
    def type(self, value : aspose.threed.entities.SkeletonType) -> None:
        '''Sets the type of the skeleton.'''
        raise NotImplementedError()
    

class Sphere(Primitive):
    '''Parameterized sphere.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Sphere` with default radius 1.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Sphere` class with specified radius.
        
        :param radius: Radius.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius : float, width_segments : int, height_segments : int) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Sphere` class with specified radius, width segments and height segments.
        
        :param radius: Radius of the sphere.
        :param width_segments: Width segments.
        :param height_segments: Height segments.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, radius : float, width_segments : int, height_segments : int, phi_start : float, phi_length : float, theta_start : float, theta_length : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Sphere` class.
        
        :param name: Name.
        :param radius: Radius of the sphere.
        :param width_segments: Width segments.
        :param height_segments: Height segments.
        :param phi_start: Phi start.
        :param phi_length: Phi length.
        :param theta_start: Theta start.
        :param theta_length: Theta length.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def width_segments(self) -> int:
        '''Gets the width segments.'''
        raise NotImplementedError()
    
    @width_segments.setter
    def width_segments(self, value : int) -> None:
        '''Sets the width segments.'''
        raise NotImplementedError()
    
    @property
    def height_segments(self) -> int:
        '''Gets the height segments.'''
        raise NotImplementedError()
    
    @height_segments.setter
    def height_segments(self, value : int) -> None:
        '''Sets the height segments.'''
        raise NotImplementedError()
    
    @property
    def phi_start(self) -> float:
        '''Gets the phi start.'''
        raise NotImplementedError()
    
    @phi_start.setter
    def phi_start(self, value : float) -> None:
        '''Sets the phi start.'''
        raise NotImplementedError()
    
    @property
    def phi_length(self) -> float:
        '''Gets the length of the phi.'''
        raise NotImplementedError()
    
    @phi_length.setter
    def phi_length(self, value : float) -> None:
        '''Sets the length of the phi.'''
        raise NotImplementedError()
    
    @property
    def theta_start(self) -> float:
        '''Gets the theta start.'''
        raise NotImplementedError()
    
    @theta_start.setter
    def theta_start(self, value : float) -> None:
        '''Sets the theta start.'''
        raise NotImplementedError()
    
    @property
    def theta_length(self) -> float:
        '''Gets the length of the theta.'''
        raise NotImplementedError()
    
    @theta_length.setter
    def theta_length(self, value : float) -> None:
        '''Sets the length of the theta.'''
        raise NotImplementedError()
    
    @property
    def radius(self) -> float:
        '''Gets the radius of the sphere.'''
        raise NotImplementedError()
    
    @radius.setter
    def radius(self, value : float) -> None:
        '''Sets the radius of the sphere.'''
        raise NotImplementedError()
    

class SweptAreaSolid(aspose.threed.Entity):
    '''A :py:class:`aspose.threed.entities.SweptAreaSolid` constructs a geometry by sweeping a profile along a directrix.'''
    
    def __init__(self) -> None:
        '''Initialize an SceneObject.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def shape(self) -> aspose.threed.profiles.Profile:
        '''The base profile to construct the geometry.'''
        raise NotImplementedError()
    
    @shape.setter
    def shape(self, value : aspose.threed.profiles.Profile) -> None:
        '''The base profile to construct the geometry.'''
        raise NotImplementedError()
    
    @property
    def directrix(self) -> aspose.threed.entities.Curve:
        '''The directrix that the swept area sweeping along with.'''
        raise NotImplementedError()
    
    @directrix.setter
    def directrix(self, value : aspose.threed.entities.Curve) -> None:
        '''The directrix that the swept area sweeping along with.'''
        raise NotImplementedError()
    
    @property
    def start_point(self) -> aspose.threed.entities.EndPoint:
        '''The start point of the directrix.'''
        raise NotImplementedError()
    
    @start_point.setter
    def start_point(self, value : aspose.threed.entities.EndPoint) -> None:
        '''The start point of the directrix.'''
        raise NotImplementedError()
    
    @property
    def end_point(self) -> aspose.threed.entities.EndPoint:
        '''The end point of the directrix.'''
        raise NotImplementedError()
    
    @end_point.setter
    def end_point(self, value : aspose.threed.entities.EndPoint) -> None:
        '''The end point of the directrix.'''
        raise NotImplementedError()
    

class Torus(Primitive):
    '''Parameterized torus.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Torus` class.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius : float, tube : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Torus` class.
        
        :param radius: The radius of the torus.
        :param tube: The radius of the torus\' tube.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, radius : float, tube : float, arc : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Torus` class.
        
        :param radius: The radius of the torus.
        :param tube: The radius of the torus\' tube.
        :param arc: Arc.'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, name : str, radius : float, tube : float, radial_segments : int, tubular_segments : int, arc : float) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.Torus` class.
        
        :param name: Name.
        :param radius: The radius of the torus.
        :param tube: The radius of the torus\' tube.
        :param radial_segments: Radial segments.
        :param tubular_segments: Tubular segments.
        :param arc: Arc.'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    def to_mesh(self) -> aspose.threed.entities.Mesh:
        '''Convert current object to mesh
        
        :returns: The mesh.'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def cast_shadows(self) -> bool:
        '''Gets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @cast_shadows.setter
    def cast_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can cast shadow'''
        raise NotImplementedError()
    
    @property
    def receive_shadows(self) -> bool:
        '''Gets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @receive_shadows.setter
    def receive_shadows(self, value : bool) -> None:
        '''Sets whether this geometry can receive shadow.'''
        raise NotImplementedError()
    
    @property
    def radius(self) -> float:
        '''Gets the radius of the torus.'''
        raise NotImplementedError()
    
    @radius.setter
    def radius(self, value : float) -> None:
        '''Sets the radius of the torus.'''
        raise NotImplementedError()
    
    @property
    def tube(self) -> float:
        '''Gets the radius of the tube.'''
        raise NotImplementedError()
    
    @tube.setter
    def tube(self, value : float) -> None:
        '''Sets the radius of the tube.'''
        raise NotImplementedError()
    
    @property
    def radial_segments(self) -> int:
        '''Gets the radial segments.'''
        raise NotImplementedError()
    
    @radial_segments.setter
    def radial_segments(self, value : int) -> None:
        '''Sets the radial segments.'''
        raise NotImplementedError()
    
    @property
    def tubular_segments(self) -> int:
        '''Gets the tubular segments.'''
        raise NotImplementedError()
    
    @tubular_segments.setter
    def tubular_segments(self, value : int) -> None:
        '''Sets the tubular segments.'''
        raise NotImplementedError()
    
    @property
    def arc(self) -> float:
        '''Gets the arc.'''
        raise NotImplementedError()
    
    @arc.setter
    def arc(self, value : float) -> None:
        '''Sets the arc.'''
        raise NotImplementedError()
    

class TransformedCurve(Curve):
    '''A :py:class:`aspose.threed.entities.TransformedCurve` gives a curve a placement by using a transformation matrix.
    This allows to perform a transformation inside a :py:class:`aspose.threed.entities.TrimmedCurve` or :py:class:`aspose.threed.entities.CompositeCurve`.'''
    
    @overload
    def __init__(self) -> None:
        '''The constructor of :py:class:`aspose.threed.entities.TransformedCurve`'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, basis_curve : aspose.threed.entities.Curve, transformation : aspose.threed.utilities.Matrix4) -> None:
        '''The constructor of :py:class:`aspose.threed.entities.TransformedCurve`'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @property
    def transform_matrix(self) -> aspose.threed.utilities.Matrix4:
        '''The transformation matrix.'''
        raise NotImplementedError()
    
    @transform_matrix.setter
    def transform_matrix(self, value : aspose.threed.utilities.Matrix4) -> None:
        '''The transformation matrix.'''
        raise NotImplementedError()
    
    @property
    def basis_curve(self) -> aspose.threed.entities.Curve:
        '''The basis curve.'''
        raise NotImplementedError()
    
    @basis_curve.setter
    def basis_curve(self, value : aspose.threed.entities.Curve) -> None:
        '''The basis curve.'''
        raise NotImplementedError()
    

class TriMesh(aspose.threed.Entity):
    '''A TriMesh contains raw data that can be used by GPU directly.
    This class is a utility to help to construct a mesh that only contains per-vertex data.'''
    
    def __init__(self, name : str, declaration : aspose.threed.utilities.VertexDeclaration) -> None:
        '''Initialize an instance of :py:class:`aspose.threed.entities.TriMesh`
        
        :param name: The name of this TriMesh
        :param declaration: The vertex\'s declaration'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def from_mesh(declaration : aspose.threed.utilities.VertexDeclaration, mesh : aspose.threed.entities.Mesh) -> aspose.threed.entities.TriMesh:
        '''Create a TriMesh from given mesh object with given vertex layout.
        
        :param declaration: Vertex\'s type definition, or memory layout
        :param mesh: Source mesh
        :returns: Instance of TriMesh converted from input mesh with specified vertex\'s memory layout'''
        raise NotImplementedError()
    
    @overload
    @staticmethod
    def from_mesh(mesh : aspose.threed.entities.Mesh, use_float : bool) -> aspose.threed.entities.TriMesh:
        '''Create a TriMesh from given mesh object, the vertex declaration are based on the input mesh\'s structure.
        
        :param use_float: Use float type instead of double type for each vertex element component.
        :returns: The :py:class:`aspose.threed.entities.TriMesh` generated from given :py:class:`aspose.threed.entities.Mesh`'''
        raise NotImplementedError()
    
    @overload
    def indices_to_array(self, result : List[List[UInt16]]) -> None:
        raise NotImplementedError()
    
    @overload
    def indices_to_array(self, result : List[List[int]]) -> None:
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer
        
        :returns: the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @staticmethod
    def copy_from(input : aspose.threed.entities.TriMesh, vd : aspose.threed.utilities.VertexDeclaration) -> aspose.threed.entities.TriMesh:
        '''Copy the :py:class:`aspose.threed.entities.TriMesh` from input with new vertex layout
        
        :param input: The input TriMesh for copying
        :param vd: The new vertex declaration of the output TriMesh
        :returns: A new TriMesh instance with new vertex declaration.'''
        raise NotImplementedError()
    
    def begin_vertex(self) -> aspose.threed.utilities.Vertex:
        '''Begin adding vertex
        
        :returns: The reference of internal vertex object in type :py:class:`aspose.threed.utilities.Vertex`'''
        raise NotImplementedError()
    
    def end_vertex(self) -> int:
        '''End adding vertex'''
        raise NotImplementedError()
    
    def write_vertices_to(self, stream : io._IOBase) -> None:
        '''Write vertices data to the specified stream
        
        :param stream: The stream that the vertices data will be written to'''
        raise NotImplementedError()
    
    def write_16b_indices_to(self, stream : io._IOBase) -> None:
        '''Write the indices data as 16bit integer to the stream'''
        raise NotImplementedError()
    
    def write_32b_indices_to(self, stream : io._IOBase) -> None:
        '''Write the indices data as 32bit integer to the stream'''
        raise NotImplementedError()
    
    def vertices_to_array(self) -> List[int]:
        '''Convert the vertices data to byte array'''
        raise NotImplementedError()
    
    @staticmethod
    def from_raw_data(vd : aspose.threed.utilities.VertexDeclaration, vertices : List[int], indices : List[int], generate_vertex_mapping : bool) -> aspose.threed.entities.TriMesh:
        '''Create TriMesh from raw data
        
        :param vd: Vertex declaration, must contains at least one field.
        :param vertices: The input vertex data, the minimum length of the vertices must be greater or equal to vertex declaration\'s size
        :param indices: The triangle indices
        :param generate_vertex_mapping: Generate :py:class:`aspose.threed.utilities.Vertex` for each vertex, which is not necessary for just serialization/deserialization.
        :returns: The :py:class:`aspose.threed.entities.TriMesh` instance that encapsulated the input byte array.'''
        raise NotImplementedError()
    
    def load_vertices_from_bytes(self, vertices_in_bytes : List[int]) -> None:
        '''Load vertices from bytes, the length of bytes must be an integer multiple of vertex size.'''
        raise NotImplementedError()
    
    def add_triangle(self, a : int, b : int, c : int) -> None:
        '''Add a new triangle
        
        :param a: The index of first vertex
        :param b: The index of second vertex
        :param c: The index of third vertex'''
        raise NotImplementedError()
    
    def read_vector4(self, idx : int, field : aspose.threed.utilities.VertexField) -> aspose.threed.utilities.Vector4:
        '''Read the vector4 field
        
        :param idx: The index of vertex to read
        :param field: The field with a Vector4/FVector4 data type'''
        raise NotImplementedError()
    
    def read_f_vector4(self, idx : int, field : aspose.threed.utilities.VertexField) -> aspose.threed.utilities.FVector4:
        '''Read the vector4 field
        
        :param idx: The index of vertex to read
        :param field: The field with a Vector4/FVector4 data type'''
        raise NotImplementedError()
    
    def read_vector3(self, idx : int, field : aspose.threed.utilities.VertexField) -> aspose.threed.utilities.Vector3:
        '''Read the vector3 field
        
        :param idx: The index of vertex to read
        :param field: The field with a Vector3/FVector3 data type'''
        raise NotImplementedError()
    
    def read_f_vector3(self, idx : int, field : aspose.threed.utilities.VertexField) -> aspose.threed.utilities.FVector3:
        '''Read the vector3 field
        
        :param idx: The index of vertex to read
        :param field: The field with a Vector3/FVector3 data type'''
        raise NotImplementedError()
    
    def read_vector2(self, idx : int, field : aspose.threed.utilities.VertexField) -> aspose.threed.utilities.Vector2:
        '''Read the vector2 field
        
        :param idx: The index of vertex to read
        :param field: The field with a Vector2/FVector2 data type
        :returns: Vector2 of specified vertex\'s field'''
        raise NotImplementedError()
    
    def read_f_vector2(self, idx : int, field : aspose.threed.utilities.VertexField) -> aspose.threed.utilities.FVector2:
        '''Read the vector2 field
        
        :param idx: The index of vertex to read
        :param field: The field with a Vector2/FVector2 data type
        :returns: FVector2 of specified vertex\'s field'''
        raise NotImplementedError()
    
    def read_double(self, idx : int, field : aspose.threed.utilities.VertexField) -> float:
        '''Read the double field
        
        :param idx: The index of vertex to read
        :param field: The field with a float/double compatible data type
        :returns: Double value of specified vertex\'s field'''
        raise NotImplementedError()
    
    def read_float(self, idx : int, field : aspose.threed.utilities.VertexField) -> float:
        '''Read the float field
        
        :param idx: The index of vertex to read
        :param field: The field with a float/double compatible data type
        :returns: Float value of specified vertex\'s field'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def vertex_declaration(self) -> aspose.threed.utilities.VertexDeclaration:
        '''The vertex layout of the :py:class:`aspose.threed.entities.TriMesh`.'''
        raise NotImplementedError()
    
    @property
    def vertices_count(self) -> int:
        '''The count of vertices in this :py:class:`aspose.threed.entities.TriMesh`'''
        raise NotImplementedError()
    
    @property
    def indices_count(self) -> int:
        '''The count of indices in this :py:class:`aspose.threed.entities.TriMesh`'''
        raise NotImplementedError()
    
    @property
    def unmerged_vertices_count(self) -> int:
        '''The count of unmerged vertices that passed in by :py:func:`aspose.threed.entities.TriMesh.begin_vertex` and :py:func:`aspose.threed.entities.TriMesh.end_vertex`.'''
        raise NotImplementedError()
    
    @property
    def capacity(self) -> int:
        '''The capacity of pre-allocated vertices.'''
        raise NotImplementedError()
    
    @property
    def vertices_size_in_bytes(self) -> int:
        '''The total size of all vertices in bytes'''
        raise NotImplementedError()
    

class TrimmedCurve(Curve):
    '''A bounded curve that trimmed the basis curve at both ends.'''
    
    def __init__(self) -> None:
        '''Constructor of :py:class:`aspose.threed.entities.TrimmedCurve`'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : aspose.threed.Property) -> bool:
        '''Removes a dynamic property.
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    @overload
    def remove_property(self, property : str) -> bool:
        '''Remove the specified property identified by name
        
        :param property: Which property to remove
        :returns: true if the property is successfully removed'''
        raise NotImplementedError()
    
    def get_property(self, property : str) -> Any:
        '''Get the value of specified property
        
        :param property: Property name
        :returns: The value of the found property'''
        raise NotImplementedError()
    
    def set_property(self, property : str, value : Any) -> None:
        '''Sets the value of specified property
        
        :param property: Property name
        :param value: The value of the property'''
        raise NotImplementedError()
    
    def find_property(self, property_name : str) -> aspose.threed.Property:
        '''Finds the property.
        It can be a dynamic property (Created by CreateDynamicProperty/SetProperty)
        or native property(Identified by its name)
        
        :param property_name: Property name.
        :returns: The property.'''
        raise NotImplementedError()
    
    def get_bounding_box(self) -> aspose.threed.utilities.BoundingBox:
        '''Gets the bounding box of current entity in its object space coordinate system.
        
        :returns: the bounding box of current entity in its object space coordinate system.'''
        raise NotImplementedError()
    
    def get_entity_renderer_key(self) -> aspose.threed.render.EntityRendererKey:
        '''Gets the key of the entity renderer registered in the renderer'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def properties(self) -> aspose.threed.PropertyCollection:
        '''Gets the collection of all properties.'''
        raise NotImplementedError()
    
    @property
    def scene(self) -> aspose.threed.Scene:
        '''Gets the scene that this object belongs to'''
        raise NotImplementedError()
    
    @property
    def parent_nodes(self) -> List[aspose.threed.Node]:
        '''Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing'''
        raise NotImplementedError()
    
    @property
    def excluded(self) -> bool:
        '''Gets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @excluded.setter
    def excluded(self, value : bool) -> None:
        '''Sets whether to exclude this entity during exporting.'''
        raise NotImplementedError()
    
    @property
    def parent_node(self) -> aspose.threed.Node:
        '''Gets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @parent_node.setter
    def parent_node(self, value : aspose.threed.Node) -> None:
        '''Sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.'''
        raise NotImplementedError()
    
    @property
    def color(self) -> aspose.threed.utilities.Vector3:
        '''Gets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @color.setter
    def color(self, value : aspose.threed.utilities.Vector3) -> None:
        '''Sets the color of the line, default value is white(1, 1, 1)'''
        raise NotImplementedError()
    
    @property
    def basis_curve(self) -> aspose.threed.entities.Curve:
        '''The basis curve to be trimmed.'''
        raise NotImplementedError()
    
    @basis_curve.setter
    def basis_curve(self, value : aspose.threed.entities.Curve) -> None:
        '''The basis curve to be trimmed.'''
        raise NotImplementedError()
    
    @property
    def first(self) -> aspose.threed.entities.EndPoint:
        '''The first end point to trim, can be a Cartesian point or a real parameter.'''
        raise NotImplementedError()
    
    @first.setter
    def first(self, value : aspose.threed.entities.EndPoint) -> None:
        '''The first end point to trim, can be a Cartesian point or a real parameter.'''
        raise NotImplementedError()
    
    @property
    def second(self) -> aspose.threed.entities.EndPoint:
        '''The second end point to trim, can be a Cartesian point or a real parameter.'''
        raise NotImplementedError()
    
    @second.setter
    def second(self, value : aspose.threed.entities.EndPoint) -> None:
        '''The second end point to trim, can be a Cartesian point or a real parameter.'''
        raise NotImplementedError()
    
    @property
    def same_direction(self) -> bool:
        '''Gets whether the trimmed result uses the same direction of the basis curve.'''
        raise NotImplementedError()
    
    @same_direction.setter
    def same_direction(self, value : bool) -> None:
        '''Sets whether the trimmed result uses the same direction of the basis curve.'''
        raise NotImplementedError()
    

class VertexElement(IIndexedVertexElement):
    '''Base class of vertex elements.
    A vertex element type is identified by VertexElementType.
    A VertexElement describes how the vertex element is mapped to a geometry surface and how the mapping information is arranged in memory.
    A VertexElement contains Normals, UVs or other kind of information.'''
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Clears all the data from this vertex element.'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class VertexElementBinormal(VertexElementVector4):
    '''Defines the binormal vectors for specified components.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementBinormal` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementVector4) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[aspose.threed.utilities.Vector4]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementDoublesTemplate(VertexElement):
    '''A helper class for defining concrete :py:class:`aspose.threed.entities.VertexElement` implementations.'''
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementDoublesTemplate) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[float]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class VertexElementEdgeCrease(VertexElementDoublesTemplate):
    '''Defines the edge crease for specified components'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementEdgeCrease` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementDoublesTemplate) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[float]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class VertexElementHole(VertexElement):
    '''Defines if specified polygon is hole'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementHole` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Clears all the data from this vertex element.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[bool]) -> None:
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class VertexElementIntsTemplate(VertexElement):
    '''A helper class for defining concrete :py:class:`aspose.threed.entities.VertexElement` implementations.'''
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementIntsTemplate) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[int]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[int]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementMaterial(VertexElement):
    '''Defines material index for specified components.
    
    A node can have multiple materials, the :py:class:`aspose.threed.entities.VertexElementMaterial` is used to render different part of the geometry in different materials.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementMaterial` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class VertexElementNormal(VertexElementVector4):
    '''Defines normal vectors for specified components.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementNormal` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementVector4) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[aspose.threed.utilities.Vector4]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementPolygonGroup(VertexElementIntsTemplate):
    '''Defines polygon group for specified components to group related polygons together.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementPolygonGroup` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementIntsTemplate) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[int]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[int]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementSmoothingGroup(VertexElementIntsTemplate):
    '''A smoothing group is a group of polygons in a polygon mesh which should appear to form a smooth surface.
    Some early 3d modeling software like 3D studio max for DOS used smoothing group to void storing normal vector for each mesh vertex.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementSmoothingGroup` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementIntsTemplate) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[int]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[int]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementSpecular(VertexElementVector4):
    '''Defines specular color for specified components.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementSpecular` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementVector4) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[aspose.threed.utilities.Vector4]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementTangent(VertexElementVector4):
    '''Defines tangent vectors for specified components.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementTangent` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementVector4) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[aspose.threed.utilities.Vector4]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementUV(VertexElementVector4):
    '''Defines the UV coordinates for specified components.
    A geometry can have multiple :py:class:`aspose.threed.entities.VertexElementUV` elements, and each one have different :py:class:`aspose.threed.entities.TextureMapping`s.'''
    
    @overload
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementUV` class.
        The default texture mapping type is :py:attr:`aspose.threed.entities.TextureMapping.DIFFUSE`'''
        raise NotImplementedError()
    
    @overload
    def __init__(self, texture_mapping : aspose.threed.entities.TextureMapping) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementUV` class.
        
        :param texture_mapping: The texture mapping type.'''
        raise NotImplementedError()
    
    @overload
    def add_data(self, data : Iterable[aspose.threed.utilities.Vector2]) -> None:
        raise NotImplementedError()
    
    @overload
    def add_data(self, data : Iterable[aspose.threed.utilities.Vector3]) -> None:
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementVector4) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[aspose.threed.utilities.Vector4]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementUserData(VertexElement):
    '''Defines custom user data for specified components.
    Usually it\'s application-specific data for special purpose.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementUserData` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Clears all the data from this vertex element.'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> Any:
        '''The user data attached in this element'''
        raise NotImplementedError()
    
    @data.setter
    def data(self, value : Any) -> None:
        '''The user data attached in this element'''
        raise NotImplementedError()
    

class VertexElementVector4(VertexElement):
    '''A helper class for defining concrete :py:class:`aspose.threed.entities.VertexElement` implementations.'''
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementVector4) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[aspose.threed.utilities.Vector4]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementVertexColor(VertexElementVector4):
    '''Defines the vertex color for specified components'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementVertexColor` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementVector4) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[aspose.threed.utilities.Vector4]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    
    @property
    def data(self) -> List[aspose.threed.utilities.Vector4]:
        '''Gets the vertex data'''
        raise NotImplementedError()
    

class VertexElementVertexCrease(VertexElementDoublesTemplate):
    '''Defines the vertex crease for specified components'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementVertexCrease` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementDoublesTemplate) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[float]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class VertexElementVisibility(VertexElement):
    '''Defines if specified components is visible'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementVisibility` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Clears all the data from this vertex element.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[bool]) -> None:
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class VertexElementWeight(VertexElementDoublesTemplate):
    '''Defines blend weight for specified components.'''
    
    def __init__(self) -> None:
        '''Initializes a new instance of the :py:class:`aspose.threed.entities.VertexElementWeight` class.'''
        raise NotImplementedError()
    
    def set_indices(self, data : List[int]) -> None:
        '''Load indices'''
        raise NotImplementedError()
    
    def clear(self) -> None:
        '''Removes all elements from the direct and the index arrays.'''
        raise NotImplementedError()
    
    def copy_to(self, target : aspose.threed.entities.VertexElementDoublesTemplate) -> None:
        '''Copies data to specified element
        
        :param target: Target.'''
        raise NotImplementedError()
    
    def set_data(self, data : List[float]) -> None:
        '''Load data'''
        raise NotImplementedError()
    
    @property
    def vertex_element_type(self) -> aspose.threed.entities.VertexElementType:
        '''Gets the type of the :py:class:`aspose.threed.entities.VertexElement`'''
        raise NotImplementedError()
    
    @property
    def name(self) -> str:
        '''Gets the name.'''
        raise NotImplementedError()
    
    @name.setter
    def name(self, value : str) -> None:
        '''Sets the name.'''
        raise NotImplementedError()
    
    @property
    def mapping_mode(self) -> aspose.threed.entities.MappingMode:
        '''Gets how the element is mapped.'''
        raise NotImplementedError()
    
    @mapping_mode.setter
    def mapping_mode(self, value : aspose.threed.entities.MappingMode) -> None:
        '''Sets how the element is mapped.'''
        raise NotImplementedError()
    
    @property
    def reference_mode(self) -> aspose.threed.entities.ReferenceMode:
        '''Gets how the element is referenced.'''
        raise NotImplementedError()
    
    @reference_mode.setter
    def reference_mode(self, value : aspose.threed.entities.ReferenceMode) -> None:
        '''Sets how the element is referenced.'''
        raise NotImplementedError()
    
    @property
    def indices(self) -> List[int]:
        '''Gets the indices data'''
        raise NotImplementedError()
    

class ApertureMode:
    '''Camera aperture modes.
    The aperture mode determines which values drive the camera aperture.
    If the aperture mode is HorizAndVert, Horizontal, or Vertical, then the field of view is used.
    If the aperture mode is FocalLength, then the focal length is used.'''
    
    HORIZ_AND_VERT : ApertureMode
    '''Set the angle values for both the horizontal and vertical settings.'''
    HORIZONTAL : ApertureMode
    '''Set only the horizontal angle.'''
    VERTICAL : ApertureMode
    '''Set only the vertical angle.'''
    FOCAL_LENGTH : ApertureMode
    '''Use focal length directly.'''

class BooleanOperation:
    '''Mesh\'s Boolean operation'''
    
    ADD : BooleanOperation
    '''Add two meshes and calculate the union of the inputs.'''
    SUB : BooleanOperation
    '''Subtract one mesh from another mesh, calculate the difference of the inputs.'''
    INTERSECT : BooleanOperation
    '''Calculate the intersection of two meshes.'''

class CurveDimension:
    '''The dimension of the curves.'''
    
    TWO_DIMENSIONAL : CurveDimension
    '''The curves are two dimensional points.'''
    THREE_DIMENSIONAL : CurveDimension
    '''The curves are three dimensional points.'''

class LightType:
    '''Light types.'''
    
    POINT : LightType
    '''The point light.'''
    DIRECTIONAL : LightType
    '''The directional light.'''
    SPOT : LightType
    '''The spot light.'''
    AREA : LightType
    '''The area light.'''
    VOLUME : LightType
    '''The volume light.'''

class MappingMode:
    '''Determines how the element is mapped to a surface.
    The :py:class:`aspose.threed.entities.MappingMode` defined how :py:class:`aspose.threed.entities.VertexElement` is mapped to the surface of geometry.'''
    
    CONTROL_POINT : MappingMode
    '''Each data is mapped to the control point of the geometry.'''
    POLYGON_VERTEX : MappingMode
    '''The data is mapped to the polygon\'s vertex
    When a control point is shared by multiple polygons, and the data is mapped as :py:attr:`aspose.threed.entities.MappingMode.POLYGON_VERTEX`, the control point as different polygon vertex will have their own data'''
    POLYGON : MappingMode
    '''The data is mapped to the polygon.
    Each polygon vertex shares the same data when mapping mode is :py:attr:`aspose.threed.entities.MappingMode.POLYGON`.'''
    EDGE : MappingMode
    '''The data is mapped to the edge.
    Each edge end point shares the same data when mapping is :py:attr:`aspose.threed.entities.MappingMode.EDGE`.'''
    ALL_SAME : MappingMode
    '''One data mapped to the whole surface.
    What ever data is interpreted as control point/polygon vertex/edge endpoints, the data is always the same as it defined by :py:attr:`aspose.threed.entities.MappingMode.ALL_SAME`.'''

class NurbsType:
    '''NURBS types.'''
    
    OPEN : NurbsType
    '''The :py:class:`aspose.threed.entities.NurbsCurve` is an open curve.'''
    CLOSED : NurbsType
    '''The :py:class:`aspose.threed.entities.NurbsCurve` is a closed curve has its last control point equals to its first one.'''
    PERIODIC : NurbsType
    '''The :py:class:`aspose.threed.entities.NurbsCurve` is a periodic curve.'''

class PatchDirectionType:
    '''Patch direction\'s types.'''
    
    BEZIER : PatchDirectionType
    '''`The patch direction is a Bezier curve. <https://en.wikipedia.org/wiki/B%C3%A9zier_curve>`'''
    QUADRATIC_BEZIER : PatchDirectionType
    '''The quadratic bezier patch.
    `The patch direction is a quadratic curve. <https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Quadratic_curves>`'''
    CARDINAL_SPLINE : PatchDirectionType
    '''cardinal patch.
    `The patch direction is a cardinal spline. <https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline>`'''
    BASIS_SPLINE : PatchDirectionType
    '''`The patch direction is a basis spline. <https://en.wikipedia.org/wiki/B-spline>`'''
    LINEAR : PatchDirectionType
    '''`The patch direction is a linear curve. <https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Linear_curves>`'''

class ProjectionType:
    '''Camera\'s projection types.'''
    
    PERSPECTIVE : ProjectionType
    '''The camera uses perspective projection.'''
    ORTHOGRAPHIC : ProjectionType
    '''The camera uses orthographic projection.'''

class ReferenceMode:
    ''':py:class:`aspose.threed.entities.ReferenceMode` defines how mapping information is stored and referenced by.'''
    
    DIRECT : ReferenceMode
    '''Data is directly referenced'''
    INDEX : ReferenceMode
    '''Data is referenced by index'''
    INDEX_TO_DIRECT : ReferenceMode
    '''Data is referenced by index, then accessed by index in :py:class:`aspose.threed.entities.VertexElement`\'s data list.'''

class RotationMode:
    '''The frustum\'s rotation mode'''
    
    FIXED_TARGET : RotationMode
    '''Target is fixed, direction is calculated by the look at target'''
    FIXED_DIRECTION : RotationMode
    '''Direction is fixed, look at is calculated by the direction'''

class SkeletonType:
    ''':py:class:`aspose.threed.entities.Skeleton`\'s types.'''
    
    SKELETON : SkeletonType
    '''The :py:class:`aspose.threed.entities.Skeleton` is a skeleton entity, which means the associated node is the root node of the whole skeletal hierarchy.'''
    BONE : SkeletonType
    '''The :py:class:`aspose.threed.entities.Skeleton` is a bone entity.'''

class SplitMeshPolicy:
    '''Share vertex/control point data between sub-meshes or each sub-mesh has its own compacted data.'''
    
    CLONE_DATA : SplitMeshPolicy
    '''Control points and vertex elements data will be cloned'''
    COMPACT_DATA : SplitMeshPolicy
    '''Only used control points and vertex elements data will be copied to the sub-mesh'''

class TextureMapping:
    '''The texture mapping type for :py:class:`aspose.threed.entities.VertexElementUV`
    Describes which kind of texture mapping is used.'''
    
    AMBIENT : TextureMapping
    '''Ambient maps'''
    EMISSIVE : TextureMapping
    '''Emissive maps'''
    DIFFUSE : TextureMapping
    '''Diffuse maps'''
    OPACITY : TextureMapping
    '''Opacity maps'''
    BUMP : TextureMapping
    '''Bump maps'''
    NORMAL : TextureMapping
    '''Normal maps'''
    SPECULAR : TextureMapping
    '''Specular maps'''
    GLOW : TextureMapping
    '''Glow maps'''
    REFLECTION : TextureMapping
    '''Reflection maps'''
    SHADOW : TextureMapping
    '''Shadow maps'''
    SHININESS : TextureMapping
    '''Shininess maps'''
    DISPLACEMENT : TextureMapping
    '''Displacement maps'''

class VertexElementType:
    '''The type of the vertex element, defined how it will be used in modeling.'''
    
    BINORMAL : VertexElementType
    '''Binormal vector, see :py:class:`aspose.threed.entities.VertexElementBinormal`'''
    NORMAL : VertexElementType
    '''Normal vector, see :py:class:`aspose.threed.entities.VertexElementNormal`'''
    TANGENT : VertexElementType
    '''Tangent vector, see :py:class:`aspose.threed.entities.VertexElementTangent`'''
    MATERIAL : VertexElementType
    '''Material index, see :py:class:`aspose.threed.entities.VertexElementMaterial`'''
    POLYGON_GROUP : VertexElementType
    '''Polygon group index, see :py:class:`aspose.threed.entities.VertexElementPolygonGroup`'''
    UV : VertexElementType
    '''Texture UV coordinate, see :py:class:`aspose.threed.entities.VertexElementUV`'''
    VERTEX_COLOR : VertexElementType
    '''Vertex color, see :py:class:`aspose.threed.entities.VertexElementVertexColor`'''
    SMOOTHING_GROUP : VertexElementType
    '''Smoothing group, See :py:class:`aspose.threed.entities.VertexElementSmoothingGroup`'''
    VERTEX_CREASE : VertexElementType
    '''Vertex crease, See :py:class:`aspose.threed.entities.VertexElementVertexCrease`'''
    EDGE_CREASE : VertexElementType
    '''Edge crease, :py:class:`aspose.threed.entities.VertexElementEdgeCrease`'''
    USER_DATA : VertexElementType
    '''User data, usually for application-specific purpose, See :py:class:`aspose.threed.entities.VertexElementUserData`'''
    VISIBILITY : VertexElementType
    '''Visibility for components, see :py:class:`aspose.threed.entities.VertexElementVisibility`'''
    SPECULAR : VertexElementType
    '''Specular colors, see :py:class:`aspose.threed.entities.VertexElementSpecular`'''
    WEIGHT : VertexElementType
    '''Blend weights, see :py:class:`aspose.threed.entities.VertexElementWeight`'''
    HOLE : VertexElementType
    '''Holes, see :py:class:`aspose.threed.entities.VertexElementHole`'''

